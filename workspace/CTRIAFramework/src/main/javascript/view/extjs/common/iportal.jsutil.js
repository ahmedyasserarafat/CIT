/** * Copyright 2014. Intellect Design Arena Limited. All rights reserved. These materials are confidential and proprietary * to Intellect Design Arena Limited and no part of these materials should be reproduced, published, transmitted or * distributed in any form or by any means, electronic, mechanical, photocopying, recording or otherwise, or stored in * any information storage or retrieval system of any nature nor should the materials be disclosed to third parties or * used in any other manner for which this is not authorized, without the prior express written authorization of * Intellect Design Arena Limited. */cbx.ns("iportal");iportal.jsutil = function (){	var loadMask = null;	/**	 * @member {Boolean} logout_piggyback	 * @memberof "iportal.jsutil"	 * @description This flag is used to enable / disable piggy back requests for logout sequence.	 * @type {Boolean}	 * @access private	 */	var logout_piggyback = true;	var widget = null;	return {		/**		 * 		 */		getListViewFilterFormId : function(listviewid) {			return listviewid + "__FILTER_FORM";		},		/**		 * @Method getListViewGridId		 * @memberof "iportal.jsutil"		 * @access public		 * @description This API call is used internally within the Canvas framework to construct the Id for a grid view		 */		getListViewGridId : function (listviewid)		{			return listviewid + "__GRID";		},		/**		 * @Method hideLoadingMsgOnBody		 * @memberof "iportal.jsutil"		 * @access public		 * @description This API call shows a load mask on the entire body		 */		showLoadingMsgOnBody : function ()		{			var maskArea = null;			if (!cbx.isEmpty(Ext))			{				if (Ext.WindowMgr && Ext.WindowMgr.getActive() != null)				{					maskArea = Ext.WindowMgr.getActive().getEl();					loadMask = null;				} else				{					maskArea = Ext.getBody();					loadMask = null;				}				if (loadMask === null)				{					var rb = CRB.getFWBundle();					loadMask = new Ext.LoadMask(maskArea, {						msg : rb.LOADING_MSG					});				}				loadMask.show();			}		},		/**		 * @Method hideLoadingMsgOnBody		 * @memberof "iportal.jsutil"		 * @access public		 * @description This API call removes the load mask that may be present on the body		 */		hideLoadingMsgOnBody : function ()		{			if (loadMask)				loadMask.hide();		},		/**		 * @Method getController		 * @memberof "iportal.jsutil"		 * @access public		 * @description This returns the default controller URL that is used within the framework for all server		 *              requests		 */		getController : function ()		{			return iportal.workspace.metadata.getController();		},		/**		 * @Method convertStringToDateObject		 * @memberof "iportal.jsutil"		 * @access public		 * @description Converts the String provided as per the Canvas default date format (dd/mm/yyyy) to a Javascript		 *              Date object		 * @param {String} stdat The date in the Canvas default date representation format (dd/mm/yyyy)		 * @returns {Date} The Date object representation of the given string. If the string passed in empty, then the		 *          same is returned.		 */		convertStringToDateObject : function (stdat)		{			if (!cbx.isEmpty(stdat) && typeof (stdat) == 'string')			{				var vals = stdat.split("/");				var xdate = new Date();				var intvals = [ Number(vals[0]), Number(vals[1]), Number(vals[2]) ];				xdate.setFullYear(intvals[2], intvals[1] - 1, intvals[0]);				return xdate;			} else				return stdat;		},		/**		 * @Method convertDateObjectToStandardFmt		 * @memberof "iportal.jsutil"		 * @access public		 * @description Converts the Date object provided to the Canvas default date format (dd/mm/yyyy)		 * @param {Date} valueToConvert The date to be serialized		 * @returns {String} The date value in the Canvas default date representation format (dd/mm/yyyy)		 */		convertDateObjectToStandardFmt : function (valueToConvert)		{			if (!cbx.isEmpty(valueToConvert) && typeof (valueToConvert) == 'object')			{				return valueToConvert.format("d/m/Y");			} else			{				return valueToConvert;			}		},		/**		 * @Method convertDateValueToUserPreferedFmt		 * @memberof "iportal.jsutil"		 * @access public		 * @description Converts the date value provided in the Canvas default date format (dd/mm/yyyy) to the date		 *              format as per user preference		 * @param {String} stdat The date in the Canvas default date representation format (dd/mm/yyyy)		 * @returns {String} The date value as per the user preferred date format. In case the input is not in a valid		 *          date format, then the same is returned		 */		convertDateValueToUserPreferedFmt : function (dateVal)		{			var __val = this.convertStringToDateObject(dateVal);			if (cbx.isDate(__val))			{				return __val.format(canvas.datePreferences.getDateFormat());			}			return __val;		},		/**		 * @Method getWidgetResizeHeight		 * @memberof "iportal.jsutil"		 * @access public		 * @description This API is used internally within the framework for handling height related adjustments from a		 *              cross browser compatibility perspective. This is primarily used within the ExtJS based framework		 * @returns {Number} The resize height that should be used for a singular widget.		 */		getWidgetResizeHeight : function ()		{			if (Ext.isIE6)			{				var gridResize = (Math.floor((Ext.lib.Dom.getViewHeight() - 190) / 2));			} else if (Ext.isIE7 || Ext.isIE8)			{				var gridResize = (Math.floor((Ext.lib.Dom.getViewHeight() - 190) / 2));			} else if (Ext.isIE8)			{				var gridResize = (Math.floor((Ext.lib.Dom.getViewHeight() - 190) / 2));			} else			{				var gridResize = (Math.floor((window.innerHeight - 185) / 2));			}			return (gridResize - 2)		},		/**		 * @Method getMultiWidgetResizeHeight		 * @memberof "iportal.jsutil"		 * @access public		 * @description This API is used internally within the framework for handling height related adjustments from a		 *              cross browser compatibility perspective. This is primarily used within the ExtJS based framework		 * @returns {Number} The resize height that should be used for a composite widget.		 */		getMultiWidgetResizeHeight : function ()		{			var h = this.getWidgetResizeHeight();// +35;			return h;		},		/**		 * @Method getContainerResizeHeight		 * @memberof "iportal.jsutil"		 * @access public		 * @description This API is used internally within the framework for handling height related adjustments from a		 *              cross browser compatibility perspective. This is primarily used within the ExtJS based framework		 * @returns {Number} The resize height that should be used for a sub workspace container.		 */		getContainerResizeHeight : function ()		{			var menuPanelHeight = 0;			var headerheight = iportal.preferences.getWorkspaceHeaderHeight();			var footerheight = iportal.preferences.getWorkspaceFooterHeight();			var currentWsId = iportal.workspace.metadata.getCurrentWorkspaceId();			var layout = iportal.workspace.metadata.getApplicationLayout();			if (!cbx.isEmpty(currentWsId))			{				menuPanelHeight = iportal.preferences.getMenuPanelHeightByWorkspaceId(currentWsId);			}			blheight = headerheight + footerheight;			if (cbx.isEmpty(menuPanelHeight))			{				menuPanelHeight = 0;			}			blheight = blheight + menuPanelHeight;// + 40 // Menu Space Height			if ("TAB" == layout)			{				blheight = blheight + 29 // Tab Header Height			} else if ("CARD" == layout)			{				blheight = blheight + 50;// Dock layer height			}			else if("MENU" == layout){				blheight = blheight + 35;//Dock layer height			}						if (Ext.isIE6) {				var gridResize = Math.floor(Ext.lib.Dom.getViewHeight()						- blheight); 			} else if (Ext.isIE7 || Ext.isIE8) {				var gridResize = Math.floor(Ext.lib.Dom.getViewHeight()						- blheight); 			} else if (Ext.isIE8) {				var gridResize = Math.floor(Ext.lib.Dom.getViewHeight()						- blheight);			} else {				var gridResize = Math.floor(window.innerHeight - blheight);			}			return gridResize;		},		/**		 * @Method getContainerResizeWidth		 * @memberof "iportal.jsutil"		 * @access public		 * @description This API is used internally within the framework for handling height related adjustments from a		 *              cross browser compatibility perspective. This is primarily used within the ExtJS based framework		 * @returns {Number} The resize width that should be used for a sub workspace container.		 */		getContainerResizeWidth : function ()		{			if (Ext.isIE6)			{				var gridResize = Math.floor(screen.availWidth - 5);			} else if (Ext.isIE7 || Ext.isIE8)			{				var gridResize = Math.floor(screen.availWidth - 5);			} else			{				var gridResize = Math.floor(window.innerWidth);			}			return gridResize;		},	/**		 * 		 */		getCaschConResizeHeight : function() {			if (Ext.isIE6) {				var gridResize = (Math.floor((screen.availHeight - 210)));			} else if (Ext.isIE7 || Ext.isIE8) {				var gridResize = (Math.floor((screen.availHeight - 235)));			} else {				var gridResize = (Math.floor((screen.availHeight - 210)));			}			return gridResize;		},				/**		 * 		 */		getGridResizeHeight : function(offset, difference) {			var diff;			if (difference) {				diff = difference;			} else {				diff = 25;			}			if (Ext.isIE6) {				var gridResize = (screen.height - 10) - offset;			} else if (Ext.isIE7 || Ext.isIE8) {				var gridResize = (screen.height) - (offset + diff + 18);			} else {				var gridResize = (screen.height - 15) - (offset + diff);			}			return gridResize;		},		/**		 * 		 */		getScrollHeight : function() {			var DocId = document.getElementById('widthResize').offsetHeight;			if (DocId > this.getGridResizeHeight(270))				document.getElementById('widthResize').style.width = '98%';			else				document.getElementById('widthResize').style.width = '100%';		},				/**		 * 		 */		getBBarHeight : function(bbarObj) {			if (bbarObj == null) {				return 0;			} else {				return 30;			}		},				/**		 * 		 */		formatDateTime : function(val) {			if (typeof val === 'string')				return val;			retVal = iportal.preferences.TimezoneManager.getLocaleTime(val);			return retVal;		},				/**		 * @Method getBBarHeight		 * @memberof "iportal.jsutil"		 * @access public		 * @description This API is used internally within the framework for handling height related adjustments from a		 *              cross browser compatibility perspective. This is primarily used within the ExtJS based framework		 * @returns {Number} The height to be considered for a button bar.		 */		getBBarHeight : function (bbarObj)		{			if (bbarObj == null)			{				return 0;			} else			{				return 30;			}		},		/**		 * @Method helpHandler		 * @memberof "iportal.jsutil"		 * @access public		 * @description This API is used to launch the help file provided in a new window. The Help URL is constructed		 *              as [Context Root]/help_files/[language id]/[file name provided]. THe language id will be the		 *              language id from the user preferences		 * @param {String} fileName The help file name to be opened.		 */		helpHandler : function (fileName)		{			var paramshelp = 'toolbar=no,location=no,directories=no,status=no,'						+ 'menubar=no,scrollbars=yes,resizable=yes,border=thin,top=150,left=130,width='						+ (screen.availWidth - 230) + ',height=' + (screen.availHeight - 240);			var filePath = '';			if (!Ext.isEmpty(fileName))			{				filePath = iportal.workspace.metadata.getContextRoot() + "/help_files/"							+ iportal.preferences.getPrimaryLang() + "/" + fileName;				var scope = {					'path' : filePath,					'paramsHelp' : paramshelp				}				var config = {					'url' : filePath,					type : "html",					originalPath : filePath,					success : function ()					{						var helphandle = iportal.openNewWindow(scope.path, 'helpwin', scope.paramsHelp);					},					fail : function ()					{						var filePath = iportal.workspace.metadata.getContextRoot() + "/help_files/"									+ iportal.preferences.getPrimaryLang() + "/" + "UnderConstruction.html";						var helphandle = iportal.openNewWindow(filePath, 'helpwin', scope.paramshelp);					},					error : function (data)					{						var filePath = iportal.workspace.metadata.getContextRoot() + "/help_files/"									+ iportal.preferences.getPrimaryLang() + "/" + "UnderConstruction.html";						var helphandle = iportal.openNewWindow(filePath, 'helpwin', scope.paramshelp);					}				}				var req = reqwest(config);			} else			{				filePath = iportal.workspace.metadata.getContextRoot() + "/help_files/"							+ iportal.preferences.getPrimaryLang() + "/" + "UnderConstruction.html";				var helphandle = iportal.openNewWindow(filePath, 'helpwin', paramshelp);			}		},		/**		 * @Method setLogoutPiggybackFlag		 * @memberof "iportal.jsutil"		 * @access public		 * @description This API is used to set the piggyback flag that should be respected for logout. This is used		 *              internally within the framework		 * @param {Boolean} Flag used for handling logout related sequences		 */		setLogoutPiggybackFlag : function (flag)		{			logout_piggyback = !!flag;		},		/**		 * @Method getLogoutPiggybackFlag		 * @memberof "iportal.jsutil"		 * @access public		 * @description This API is used to get the piggyback flag that should be respected for logout. This is used		 *              internally within the framework		 * @returns {Boolean} Flag used for handling logout related sequences		 */		getLogoutPiggybackFlag : function ()		{			return logout_piggyback;		},		/**		 * @Method getFormattedDateAndTime		 * @memberof "iportal.jsutil"		 * @access public		 * @description Converts the date with time value provided in the Canvas default date format (dd/mm/yyyy		 *              HH:MI:SS) to the date format as per user preference. The output includes the timezone offset as		 *              per their timezone preference		 * @param {String} val The date and time in the Canvas default date representation format (dd/mm/yyyy HH:MI:SS)		 * @returns {String} The date and time value as per the user preferred date format. In case the input is not in		 *          a valid date format, then the same is returned		 */		getFormattedDateAndTime : function (val)		{			var returnval = '';			if (val instanceof Object)			{				var dateObj = Date.parseDate(val, 'd/m/Y H:i:s');				returnval = dateObj.format(canvas.datePreferences.getDateFormat() + ' '							+ iportal.preferences.getTimeFormat())							+ iportal.preferences.getTimeZoneOffset();				return returnval;			} else			{				return val;			}		},		/**		 * @Method getFormattedDateAndTimeNoTZ		 * @memberof "iportal.jsutil"		 * @access public		 * @description Same as getFormattedDateAndTime except that this does not include the Timezone offset to the		 *              final string		 * @param {String} val The date and time in the Canvas default date representation format (dd/mm/yyyy HH:MI:SS)		 * @returns {String} The date and time value as per the user preferred date format. In case the input is not in		 *          a valid date format, then the same is returned		 */		getFormattedDateAndTimeNoTZ : function (val)		{			var returnval = '';			if (val instanceof Object)			{				var dateObj = Date.parseDate(val, 'd/m/Y H:i:s');				returnval = dateObj.format(canvas.datePreferences.getDateFormat() + ' '							+ iportal.preferences.getTimeFormat());				return returnval;			} else			{				return val;			}		},		/**		 * @Method getWidgetHeightInPxl		 * @memberof "iportal.jsutil"		 * @access private		 * @description Gets the height of the widget in Pixels based after taking into account the global settings of		 *              min and max height provided to canvas		 * @param {Number} WidgetheightInPx The height in pixels configured		 * @returns {Number} The height in pixels after adjustment. In case the value is not provided, then this returns		 *          -1.		 */		getWidgetHeightInPxl : function (WidgetheightInPx)		{			var defaultminHgt = parseInt(iportal.systempreferences.getDefaultWidgetMinHeight());			var defaultmaxHgt = parseInt(iportal.systempreferences.getDefaultWidgetMaxHeight());			if (!Ext.isEmpty(WidgetheightInPx))			{				if (WidgetheightInPx > defaultminHgt && WidgetheightInPx < defaultmaxHgt)				{					return WidgetheightInPx;				} else if (WidgetheightInPx < defaultminHgt)				{					return defaultminHgt;				} else if (WidgetheightInPx > defaultmaxHgt)				{					return defaultmaxHgt;				}			}			return -1;		},		/**		 * @Method getWidgetHeight_RowBased		 * @memberof "iportal.jsutil"		 * @access private		 * @description Gets the height of the widget based on the number of rows that has been provided by the user		 * @param {Number} numberOfRows The number of rows of data that needs to be displayed		 * @returns {Number} The height in pixels after based on the number of rows		 */		getWidgetHeight_RowBased : function (numberOfRows)		{			var widgetHeight = 0;			if (numberOfRows != null && numberOfRows !== "" && numberOfRows !== 0)			{				widgetHeight = iportal.jsutil.getWidgetheight(numberOfRows);				return widgetHeight;			} else				return;		},		/**		 * @Method getWidgetheight		 * @memberof "iportal.jsutil"		 * @access private		 * @description Gets the height of the widget based on the number of rows that has been provided by the user.		 *              Includes the factors like grid header, cell padding, etc...		 * @param {Number} numberOfRows The number of rows of data that needs to be displayed		 * @returns {Number} The height in pixels after based on the number of rows		 */		getWidgetheight : function (rowCount)		{			var panelHeader = 26;			var gHeaderHeight = iportal.preferences.getGridHeaderHeight();			var gRowHeight = iportal.preferences.getGridCellHeight();			rowCount = rowCount == null || rowCount == '' ? 10 : rowCount;			var totalHeight = (rowCount * gRowHeight) + gHeaderHeight + panelHeader;			return totalHeight;		},		/**		 * @Method getConfigHeight		 * @memberof "iportal.jsutil"		 * @access public		 * @description This is used internally within the canvas framework for adjusting the height of the grid app as		 *              per the configuration provided		 * @param {Object} config Details of the user configuration to calculate the height		 * @returns {Number} The height in pixels after based on the number of rows		 */		getConfigHeight : function (config)		{			var no_of_rows = config.NO_OF_ROWS;			var wgt_hgt_pixels = config.WIDGET_PXL_HT;			var wgt_hgt_pxl = this.getWidgetHeightInPxl(config.WIDGET_PXL_HT);			var wgt_hgt_rows = this.getWidgetHeight_RowBased(no_of_rows);			if (wgt_hgt_pxl != -1)			{				return wgt_hgt_pxl;			} else if ((wgt_hgt_pixels == null || wgt_hgt_pixels == "" || wgt_hgt_pixels == 0)						&& (no_of_rows != null && no_of_rows !== "" && no_of_rows !== 0))			{				return wgt_hgt_rows;			}		},		/**		 * @Method getConfigHeight		 * @memberof "iportal.jsutil"		 * @access public		 * @description This is used internally within the canvas framework for creation of a widget.		 * @param {Object} config Details of the widget configuration		 * @returns {Object} The widget object created.		 */		initiateWidget : function (config)		{			var widgetId = config.WIDGET_ID;			var widget = null;			var rb = CRB.getBundle(config.WIDGET_BUNDLE_KEY);			var label = null;			var isClosed = false;			try			{				if (config != null && config.isClosed === true)				{					isClosed = true;				}				if (!isClosed)				{					widget = canvas.view.appRegisterMap && canvas.view.appRegisterMap[widgetId]								? canvas.view.appRegisterMap[widgetId](config) : null;					if (!widget)					{						widget = iportal.listview.listviewrenderermap.getWidget(config);					}					if (!Ext.isEmpty(widget))					{						/**						 * Code to update and provide parents height to the Widget, In case there is only one widget to						 * be loaded						 */						if (config != null && config.height != null)						{							widget.setParentHeight(config.height);						}						/**						 * In case of singular widget loading from the MultiViewModel rather an new AJAX call						 */						if (!widget.isContainer)						{							if (widget.mv.mvh != null)							{								widget.mv.add(widget.mv.mvh);								widget.mv.doLayout();							}						}					}				}				if (rb != null)				{					config.LABEL = rb[config.WGT_TITLE];				}				// The method addIconToCatalog of iportal.jsutil will not be used anymore after the introduction of dock				// model				// iportal.jsutil.addIconToCatalog(config);				return widget;			} catch (e)			{				LOGGER.error(e);			}			return null;		},		/**		 * @Method addIconToCatalog		 * @memberof "iportal.jsutil"		 * @access private		 * @deprecated This is no longer used. Retained for backward compatibility		 * @description This adds the widget icon to the catalog		 * @param {Object} config Details of the widget configuration		 */		addIconToCatalog : function (config)		{			// Commented code deleted		},		/**		 * @Method addIconToWorkspaceCatalog		 * @memberof "iportal.jsutil"		 * @access public		 * @description This is used internally within the canvas application layouts to add the list of workspaces as		 *              icons to the catalogue. The catalogue is always identified as a container created with the ID		 *              "WORKSPACE_CATALOGUE"		 */		addIconToWorkspaceCatalog : function ()		{			var isClosed = false;			var wigCat = Ext.getCmp("WORKSPACE_CATALOGUE");			if (wigCat != null)			{				var wsManager = iportal.workspace.metadata.getWorkspaceManager();				if (wsManager != null)				{					if (iportal.workspace.metadata.getWorkspaces().length != 0)					{ // CHG NO WKS MSG						for (var i = 0; i < wsManager.items.length; i++)						{							var iconObj = {								xtype : 'iportal-catalog-icon',								iconCls : wsManager.getComponent(i).itemId,								itemId : wsManager.getComponent(i).itemId,								hidden : false,								height : 24,								width : 24,								label : wsManager.getComponent(i).title,								scale : 'large',								style : 'margin:20px 0px 0px 15px',								/**								 * Defining the handler of the iportal-catalog-icon								 */								myTabIndex : i,								screenRef : this,								handler : function ()								{									LOGGER.info(iportal.workspace.metadata.getWorkspaceManager().getActiveTab());									iportal.workspace.metadata.getWorkspaceManager().setActiveTab(this.myTabIndex);								}							};							wigCat.add(iconObj);							wigCat.doLayout();						}					} // CHG NO WKS MSG					if (iportal.systempreferences.getDesignCanvasInd())					{						wigCat.add({							xtype : 'iportal-catalog-icon',							height : 24,							width : 24,							scale : 'large',							hidden : false,							style : 'margin:20px 0px 0px 15px',							label : CRB.getFWBundle()['LBL_DYC'],							itemId : 'addnewworkspace',							iconCls : 'addnewworkspace',							handler : function ()							{								CBXDOWNLOADMGR.requestScripts(cbx.downloadProvider.getMergedArray([ "APPSTORE" ]),											function ()											{												cbx.appstore.Jsutil.initAppstore();											});							}						});					}					wigCat.doLayout();				}			}		},		/**		 * @Method parseRawData		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method that loops through the items, splits each value using ',' as separator and		 *              converts the entire content into a 2 Dimensional array		 * @param {Array} items The array of strings that needs to be converted into a 2-Dimensional array		 */		parseRawData : function (items)		{			var dataArray = [];			var keyArray = [];			for (var i = 0; i < items.length; i++)			{				if (items[i] != null)				{					splitArr = items[i].split(',');					keyArray.push(splitArr[0]);					keyArray.push(splitArr[1] != null ? splitArr[1] : splitArr[0]);					dataArray.push(keyArray);				}				keyArray = [];			}			return dataArray;		},		/**		 * @Method getPreferredCurrency		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method that gets the preferred currency of the user. In case the preference is not set,		 *              then the default currency of the bank is returned		 * @returns {String} The preferred currency to used		 */		getPreferredCurrency : function ()		{			var prefCurrency = iportal.preferences.getEquivalentCurrency();			if (prefCurrency == null || prefCurrency == '' || prefCurrency == "null" || prefCurrency == ' ')			{				prefCurrency = iportal.systempreferences.getDefaultBankCCY();			}			return prefCurrency;		},		/**		 * @Method getCCYSelectorData		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method that gets the list of all currencies under the user's preferred rate card. The		 *              preferred currency of the user is set as the first value in the result array always		 * @returns {Array} The list of currency code and description as retrieved from the user preferences		 */		getCCYSelectorData : function ()		{			if (iportal.preferences.getRatecardCurrencies() != null)			{				var currencies = cbx.clone(iportal.preferences.getRatecardCurrencies());				var prefCurrency = iportal.preferences.getEquivalentCurrency();				if (prefCurrency == null || prefCurrency == '' || prefCurrency == "null" || prefCurrency == ' ')				{					prefCurrency = iportal.systempreferences.getDefaultBankCCY();				}				var commonbundle = CRB.getFWBundle();				currencies.unshift(',' + commonbundle['Default_CC'] + prefCurrency);				return iportal.jsutil.parseRawData(currencies);			}			return [];		},		/**		 * @Method isValidValueInStore		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method specific to currency preference management within the App. This checks if the		 *              currency provided is part of the overall store of currencies provided earlier.		 * @param {Array} store The list of currencies against which to compare		 * @param {String} value The currency to check for existence in store		 * @returns {Boolean} true if the value is present in store. false otherwise		 */		isValidValueInStore : function (store, value)		{			var flagFind = false;			for (var i = 0; i < store.getCount(); i++)			{				if (store.getAt(i).data.rateCurrkey === value)				{					flagFind = true;					return flagFind;				}			}			return flagFind;		},		/**		 * @Method getStandardTextNotePanelHeight		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for adjusting the height of the app		 *              based on the need to show standared text note		 * @param {Boolean} flag true, if there is a standard text note panel to be shown. false otherwise		 * @returns {Number} The height to be reserved for the standard text note panel		 */		getStandardTextNotePanelHeight : function (flag)		{			if (flag)			{				return 43;			} else			{				return 0;			}		},		/**		 * @Method getFilterPanelHeight		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for adjusting the height of the app		 *              based on the need to show filter panel		 * @param {Boolean} flag true, if there is a filter panel to be shown. false otherwise		 * @returns {Number} The height to be reserved for the filter panel		 */		getFilterPanelHeight : function (flag)		{			if (flag)			{				return 38;			} else			{				return 0;			}		},		/**		 * @Method getShowAsToolBarHeight		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for adjusting the height of the app		 *              based on the need to show tools as a separate toolbar		 * @returns {Number} The height to be reserved for the separate toolbar		 */		getShowAsToolBarHeight : function ()		{			return 22;		},		/**		 * @Method getDefaultRowCount		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for getting the default number or		 *              rows to be displayed in a grid (in case one has not been configured)		 * @returns {Number} The default number of rows to be displayed		 */		getDefaultRowCount : function ()		{			return 3;		},		/**		 * @Method getSystemDate		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for getting the current date on the		 *              user's system. Since this retrieves the date from the current user's system, there is always a		 *              chance that this will not be in sync with teh date / time at the server		 * @returns {Date} The current date		 */		getSystemDate : function ()		{			var date = new Date();			var day = date.getDate();			var month = date.getMonth() + 1;			var year = date.getFullYear();			date = (day + '/' + month + '/' + year);			return date;		},		/**		 * @Method getSystemDate		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework to return a string of the specified		 *              width by truncating the input string if its width is greater than the input width		 * @param (String} val The value to be validated		 * @param {Number} width The widgth available		 * @returns {String} The corrected text value		 */		getText : function (val, width)		{			if (val == 'null' || val == 'NULL' || val == undefined || val == null || val == '')			{				return '';			}			var metaData = '';			var stringNumber = iportal.util.stringnumber.getInstance();			var neededWidth = stringNumber.getNeededWidthNoEl(val, metaData);			if (neededWidth > width)			{				var writestring = stringNumber.getStringForWidth(val, width, metaData);				writestring = writestring.substring(0, writestring.length - 3).concat('..');				return writestring;			}			return val;		},		/**		 * @Method getGridGroupHeaderHeight		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for adjusting the height of the app		 *              based on the need to show a grouped grid		 * @returns {Number} The height to be reserved for the group header in a grouped grid		 */		getGridGroupHeaderHeight : function ()		{			return 44;		},		/**		 * @Method doPortalSizing		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for adjusting the widget position on		 *              any shuffle		 * @param {Object} appWidget The widget that has got moved around as part of the shuffle		 */		doPortalSizing : function (appWidget)		{			if (Ext.isEmpty(appWidget.initialHeight))			{				appWidget.initialHeight = appWidget.height;			} else if (appWidget.height !== appWidget.initialHeight)			{				appWidget.setHeight(appWidget.initialHeight);				if (appWidget.updateHeight)				{					appWidget.updateHeight(appWidget.initialHeight);				} else				{					appWidget.mwc.updateHeight(appWidget.initialHeight);				}				appWidget.doLayout();				if (appWidget.ownerCt.ownerCt.ownerCt.ownerCt.resetHeight)				{					appWidget.ownerCt.ownerCt.ownerCt.ownerCt.resetHeight();				} else				{					appWidget.ownerCt.ownerCt.ownerCt.ownerCt.doLayout();				}			}			if (Ext.isEmpty(appWidget.findParentByType('portlet').initialWidth))			{				appWidget.findParentByType('portlet').initialWidth = appWidget.getWidth() - 3;				appWidget.findParentByType('portlet').setWidth(appWidget.getWidth() - 3);				var appWidgetIndex = this.getParentPortletIndex(appWidget);				appWidget.findParentByType('portal').getComponent(appWidgetIndex).resizeWidth = appWidget.getWidth() - 3;				appWidget.findParentByType('portal').resetSplitterConf();			} else if (appWidget.getWidth() !== appWidget.findParentByType('portlet').initialWidth)			{				iportal.jsutil.adjustPortalColumnsWidth(appWidget, appWidget.findParentByType('portlet').initialWidth);			}		},		/**		 * @Method adjustPortalColumnsWidth		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for adjusting the width of the portal		 *              columns based on the new widget being added		 * @param {Object} widget The reference widget		 * @param {Number} newRwid New width of the reference portal column		 */		adjustPortalColumnsWidth : function (widget, newRwid)		{			var portalWidth = widget.findParentByType('portal').getWidth();			var appWidPIndex = iportal.jsutil.getParentPortletIndex(widget);			var neighbourPortletIndex = (appWidPIndex !== 0) ? 0 : 1;			var splitterWidth = iportal.jsutil.getSplitterWidth(widget.findParentByType('portal'));			widget.findParentByType('portal').getComponent(appWidPIndex).resizeWidth = newRwid;			widget.findParentByType('portal').getComponent(appWidPIndex).setWidth(newRwid);			var otherColsWidth = iportal.jsutil.getOtherColsWidth(widget.findParentByType('portal'), newRwid,						appWidPIndex);			var lwid = portalWidth - (newRwid + splitterWidth + otherColsWidth);			widget.findParentByType('portal').getComponent(neighbourPortletIndex).resizeWidth = lwid;			widget.findParentByType('portal').resetSplitterConf();			widget.findParentByType('portal').getComponent(neighbourPortletIndex).setWidth(lwid);			widget.findParentByType('portal').doLayout();		},		/**		 * @Method getOtherColsWidth		 * @memberof "iportal.jsutil"		 * @access private		 * @description Utility method used internally within the Canvas framework for getting width of the columns		 *              other than the given column.		 * @param {Object} portal The portal for which the width is needed		 * @param {Number} appWidWidth New width of the reference portal column		 * @param {Number} aIndex The index to ignore		 */		getOtherColsWidth : function (portal, appWidWidth, aIndex)		{			var totWidth = 0;			if (portal.getComponent(2))			{				for (var i = 0; i < portal.items.length; i++)				{					if (i !== aIndex && i !== 0)					{						totWidth = totWidth + portal.getComponent(i).getWidth();					}				}			}			return totWidth;		},		/**		 * @Method getParentPortletIndex		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for getting the parent portal /		 *              container within which the widget is rendered		 * @param {Object} widget The widget for which the parent is to be spotted		 * @returns {Number} The index of the parent portal. In case this cannot be spotted, the index is returned as 0.		 */		getParentPortletIndex : function (widget)		{			var widgetPortalIndex = 0;			for (var i = 0; i < widget.findParentByType('portal').items.length; i++)			{				var item = widget.findParentByType('portal').getComponent(i);				if (item.find('itemId', widget.itemId).length !== 0)				{					widgetPortalIndex = i;				}			}			return widgetPortalIndex;		},		/**		 * @Method getSplitterWidth		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for getting the width of the splitter		 *              for the portal		 * @param {Object} portal The portal for which the splitter width is to be calculated		 * @returns {Number} The width of the splitter. In case there are no items, the width will be same as that of		 *          the portal.		 */		getSplitterWidth : function (portal)		{			var portalWidth = portal.getWidth();			var totalItemsWidth = 0;			for (var i = 0; i < portal.items.length; i++)			{				totalItemsWidth = totalItemsWidth + portal.getComponent(i).getWidth();			}			return portalWidth - totalItemsWidth;		},		/**		 * @Method adjustPortalWidth		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for adjusting the width of the portal		 * @param {Object} portal The portal for which the splitter width is to be calculated		 * @param {Number} rwidth The current widget's width		 * @param {Number} lWidth The neighbouring widget's width		 * @param {Number} sWidth Width of the splitter		 * @param {Number} pWidth Width available to the portal		 * @param {Number} aIndex Current widget's index		 * @param {Number} nIndex Neighbouring widget's index		 */		adjustPortalWidth : function (portal, rWidth, lWidth, sWidth, pWidth, aIndex, nIndex)		{			if (!portal.getComponent(aIndex))			{				return;			}			if (Ext.isIE8)			{				portal.getComponent(aIndex).setWidth(rWidth);				portal.getComponent(nIndex).setWidth(lWidth);			} else			{				portal.getComponent(aIndex).resizeWidth = rWidth;				portal.getComponent(aIndex).setWidth(rWidth);				portal.getComponent(nIndex).resizeWidth = lWidth;				portal.getComponent(nIndex).setWidth(lWidth);				portal.resizeWidth = rWidth + lWidth + sWidth;			}		},		/**		 * @Method loadContextApp		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for loading a context app		 * @param {Object} config Object that has the details of the context app to be loaded		 */		loadContextApp : function (config)		{			var defaultAppLoaded = CBXFORMCONTAINER.getActiveFormContainer().loadDefaultApp ? CBXFORMCONTAINER						.getActiveFormContainer().loadDefaultApp() : iportal.jsutil.loadDefaultApp();			if (!defaultAppLoaded)			{				var widget = iportal.workspace.metadata.getCurrentWorkspace().find('itemId', config.appWidget)[0];				if (widget)				{					var rb = CRB.getFWBundle();					var loadMask = new Ext.LoadMask(widget.getEl(), {						msg : rb.LOADING_MSG					});					widget.loadMask = loadMask;					loadMask.show();					var wrapperPanel = widget.find('name', 'wrapper-owner')[0];					var Cpanel = widget.find('name', 'content-panel')[0];					if (wrapperPanel && wrapperPanel.rendered === true)					{						if (Cpanel && Cpanel.ownerCt.getLayout().activeItem === wrapperPanel)						{							wrapperPanel.getEl().scale([ wrapperPanel.getEl().getWidth ], [ 0 ], {								easing : 'easeOut',								duration : .5,								scope : Cpanel,								callback : function ()								{									var grid = Ext.getCmp(this.gridId);									grid.fireEvent('cellclick', grid, grid.store.indexOf(this.record), 1);								}							});						} else						{							wrapperPanel.getEl().scale([ wrapperPanel.getEl().getWidth ], [ 0 ], {								easing : 'easeOut',								duration : .5,								scope : wrapperPanel.ownerCt,								callback : function ()								{									this.getWrapperContainer().destroy();									this.setWrapperContainer(null);									this.getComponent(0).show();									this.findParentByType('portlet').getComponent(0).getEl().unmask()								}							});						}					}				}			}		},		/**		 * @Method loadDefaultApp		 * @memberof "iportal.jsutil"		 * @access private		 * @description Utility method used internally within the Canvas framework for loading the default App		 * @returns {Boolean} true, if the App loaded successfully. false otherwise		 */		loadDefaultApp : function ()		{			var loaded = false;			var defaultWidId = iportal.workspace.metadata.getCurrentWorkspace().getWidgetContainer().defaultWidget;			if (!Ext.isEmpty(defaultWidId))			{				var widget = iportal.workspace.metadata.getCurrentWorkspace().getWidgetContainer().appMVRegistry							.getWidget(defaultWidId);				var evaluator = widget.mvh.getSelectedPanel().renderer.evaluator;				if (evaluator)				{					loaded = evaluator.doSelect(widget.getCurrentViewObj());				}			}			return loaded;		},		/**		 * @Method getDefaultContextApp		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for identifying the default context		 *              app to be loaded		 * @param {String} viewId The id of the view for which the default is to be identified		 * @returns {String} The first occurence of the context menu for which default is set to "Y".		 */		getDefaultContextApp : function (viewId)		{			var menuId = null;			var contextMenuList = IMM.getContextMenuList(viewId);			if (contextMenuList && contextMenuList[0] && contextMenuList[0].child_nodes.length > 0)			{				for (var i = 0; i < contextMenuList[0].child_nodes.length; i++)				{					var menu = contextMenuList[0].child_nodes[i];					if (menu.default_menu === "Y")					{						menuId = menu.menu_id;						break;					}				}			}			return menuId;		},		/**		 * @Method loadDefaultAds		 * @memberof "iportal.jsutil"		 * @access public		 * @deprecated This is retained for backward compatibility. But in a typical implementation it is expected that		 *             the Ads functionality is taken over by the end product and not delegated to a default JSP that is		 *             pointed to here		 * @description Utility method used internally within the Canvas framework for loading the default Ad. For this		 *              the Ads source is set to the URL - [context root]/CbxAdsSrc.jsp?ADS_IMAGE=xxx. It is expected		 *              that the end application provide this JSP that knows how to serve this ad image. If there is an		 *              array, then the iframe source is changed in a loop for the Ad to keep flipping through one		 *              another. The frequency of the loop is set of 5 seconds.		 * @param {Object} adList The array of Ads to be displayed		 * @param {Number} counter The counter to start from.		 * @param {Object} that The iframe object into which the loading needs to be orchestrated		 */		loadDefaultAds : function (adList, counter, that)		{			var adsdataList = [];			var streamedImgs = [];			var count = 0;			if (adList.length > 1)			{				var updateSrc = function ()				{					var img = adList[count];					var iframe = that.setSrc('CbxAdsSrc.jsp?ADS_IMAGE=' + img, false);					count = (count + 1 == adList.length) ? 0 : count + 1;				};				var task = {					run : updateSrc,					interval : 5000				};				var runner = new Ext.util.TaskRunner();				runner.start(task);			} else			{				var img = adList[count];				that.setSrc('CbxAdsSrc.jsp?ADS_IMAGE=' + img, false);			}		},		/**		 * @Method loadDefaultAds		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for loading messages from within a		 *              bundle. Incase the bundle provided is not available, then the same is taken from the default		 *              bundle provided.		 * @param {String} bundleKey The bundle from which translation is to be fetched		 * @param {String} text The key that needs to be translated		 * @param {String} defaultBundle The default bundle from which to load. It should be noted that if for what ever		 *            reason, the default bundle also cannot be loaded, the framework will try to load from the system		 *            default bundle provided by Canvas.		 * @returns {String} The translated value from the bundle		 */		getTextFromBundle : function (bundleKey, text, defaultBundle)		{			var bundleKey = !cbx.isEmpty(bundleKey) ? bundleKey : defaultBundle;			var rb = !cbx.isEmpty(CRB.getBundle(bundleKey)) ? CRB.getBundle(bundleKey) : CRB.getFWBundle();			return !cbx.isEmpty(rb[text]) ? rb[text] : text;		},		/**		 * @Method loadDefaultAds		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for clearing any server side cache		 *              stored against the app		 * @param {Object} params The params using which the ajax needs to be fired. There is no interest in processing		 *            the success or failure of the server in processing this clear request		 */		executeClearEhCacheHandler : function (params)		{			cbx.ajax({				params : params,				success : function (result)				{					LOGGER.debug('Success: result=', result);				},				failure : function (result, request)				{					LOGGER.debug('Failure: result=', result);				}			});		},		/**		 * @Method tabSelectionHandler		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for handling the switch between		 *              different cards / sections / tabs within the layouts		 * @param {Object} layoutContainer The sub workspace that has been selected.		 */		tabSelectionHandler : function (layoutContainer)		{			// Removed unused code			layoutContainer.renderWidgets();			layoutContainer.doLayout();		},		/**		 * @Method tabSelectionHandler		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for handling the switch between		 *              different cards / sections / tabs within the layouts. Gets fired when any layout container is		 *              deactivated Reponsible for destroying all the widgets of that container.		 * @param {Object} layoutContainer The sub workspace that has been selected.		 */		tabDeSelectionHandler : function (layoutContainer)		{			iportal.workspace.metadata.setWorkspaceChangeAcceptable(false);			try			{				setTimeout(function ()				{					try					{						layoutContainer.removeWidgets();					} catch (e)					{						iportal.workspace.metadata.setWorkspaceChangeAcceptable(true);					}					;				}, 500);			} catch (e)			{				iportal.workspace.metadata.setWorkspaceChangeAcceptable(true);			}		},		/**		 * @Method getRandomNumber		 * @memberof "iportal.jsutil"		 * @access public		 * @description Utility method used internally within the Canvas framework for getting a random number. Since		 *              this relies on Math.random(), there are always chances of duplicates / collisions.		 * @returns {Number} The new random number generated		 */		getRandomNumber : function ()		{			return Math.floor((Math.random() * 1000000) + 1);		},		/**		 * @Method getDefaultMenuPanelHeight		 * @memberof "iportal.jsutil"		 * @access public		 * @description This API is used internally within the framework for handling height related adjustments from a		 *              cross browser compatibility perspective. This is primarily used within the ExtJS based framework		 * @returns {Number} The height to be considered for a workspace menu bar		 */		getDefaultMenuPanelHeight : function ()		{			return 35;		}		,		getAppInstanceOf : function (appId)		{			var curWs = iportal.workspace.metadata.getCurrentWorkspace();			if (curWs.getWidgetContainer)			{				return curWs.getWidgetContainer().appMVRegistry.getWidget(appId);			}			return curWs.find('itemId', appId)[0];}	}}();