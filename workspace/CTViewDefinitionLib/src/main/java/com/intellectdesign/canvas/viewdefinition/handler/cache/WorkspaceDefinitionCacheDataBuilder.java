/** * Copyright 2014. Intellect Design Arena Limited. All rights reserved.  *  * These materials are confidential and proprietary to Intellect Design Arena  * Limited and no part of these materials should be reproduced, published, transmitted * or distributed in any form or by any means, electronic, mechanical, photocopying,  * recording or otherwise, or stored in any information storage or retrieval system  * of any nature nor should the materials be disclosed to third parties or used in any  * other manner for which this is not authorized, without the prior express written  * authorization of Intellect Design Arena Limited. *  */package com.intellectdesign.canvas.viewdefinition.handler.cache;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import com.intellectdesign.canvas.cache.handler.CacheConstants;import com.intellectdesign.canvas.cache.handler.CacheDataBuilder;import com.intellectdesign.canvas.database.DatabaseException;import com.intellectdesign.canvas.entitlement.CanvasViewEntlVO;import com.intellectdesign.canvas.entitlement.EntitlementException;import com.intellectdesign.canvas.entitlement.EntitlementsHelper;import com.intellectdesign.canvas.logger.Logger;import com.intellectdesign.canvas.login.sessions.SessionInfo;import com.intellectdesign.canvas.viewdefinition.ViewDefinitionConstants;import com.intellectdesign.canvas.viewdefinition.ViewDefinitionException;import com.intellectdesign.canvas.viewdefinition.ViewDefinitionInstruction;/** * This class is for workspace definition cache builder extends cache handler. *  * @version 1.0 */public class WorkspaceDefinitionCacheDataBuilder extends CacheDataBuilder{	/**	 * Internal constant for serialization purposes	 */	private static Logger logger = Logger.getLogger(WorkspaceDefinitionCacheDataBuilder.class);	/**	 * this is ref to Init Cache Session Map	 * 	 * @param hashMap	 * @return	 * @see com.intellectdesign.canvas.cache.handler.CacheDataBuilder#initializeCache(java.util.HashMap)	 */	@Override	protected List initializeCache(HashMap hashMap)	{		logger.ctinfo("CTVDF00251");		List<Map> wsList = new ArrayList<Map>();		String gcif = null;		String userno = null;		String sUserRole = null;		int channelId = 3;		SessionInfo sessInfo = null;		sessInfo = (SessionInfo) hashMap.get(CacheConstants.OBJECT_SESSIONINFO);		if (sessInfo == null)		{			logger.cterror("CTVDF00252", sessInfo);			return null;		}		gcif = sessInfo.sCustNo;		userno = sessInfo.userNo;		channelId = sessInfo.channelId;		sUserRole = sessInfo.userRole;		logger.ctdebug("CTVDF00253", gcif, userno, sUserRole);		if (gcif == null || userno == null)		{			logger.cterror("CTVDF00254");			return wsList;		}		try		{			Map dataMap = new HashMap();			EntitlementsHelper entlHelper = new EntitlementsHelper();			CanvasViewEntlVO entlvo = entlHelper.getUserAccessEntitlements(gcif, userno, sUserRole);			dataMap.put(ViewDefinitionConstants.WORKSPACES, retrieveApplicationStructureNodes(entlvo, channelId,sessInfo.prefWorkspace));			wsList.add(dataMap);		} catch (DatabaseException dbe)		{			logger.cterror("CTVDF00255", dbe);		} catch (EntitlementException e)		{			logger.cterror("CTVDF00255", e);		}		logger.ctinfo("CTVDF00256");		return wsList;	}	/**	 * this is ref to VaildParams	 * 	 * @param params	 * @return	 * @see com.intellectdesign.canvas.cache.handler.CacheDataBuilder#validateParameters(java.util.HashMap)	 */	@Override	protected String validateParameters(HashMap params)	{		return null;	}	/**	 * 	 * Intended to retrieve the entire application's workspace hierarchy specific to the logged in user's entitlements	 * 	 * @param userno	 * 	 * @param gcif	 * @return ws list	 * 	 * @throws DatabaseExceptions	 */	private List<Map> retrieveApplicationStructureNodes(CanvasViewEntlVO entlvo, int channelId,String prefWorkspace)			throws DatabaseException	{		List listSystemViews = null;		List<Map> wsList = new ArrayList<Map>();		ViewDefinitionInstruction viewDefinitionInstruction = new ViewDefinitionInstruction();		try		{			listSystemViews = viewDefinitionInstruction.getApplicationStructureNodesForUser(entlvo, channelId);			int wsIndex = -1;			for (int i = 0; i < listSystemViews.size(); i++)			{				wsIndex = -1;				Map rowMap = (HashMap) listSystemViews.get(i);				for (int wsCounter = 0; wsCounter < wsList.size(); wsCounter++)				{					if (null != rowMap.get("WORKSPACE_ID")							&& rowMap.get("WORKSPACE_ID").equals(wsList.get(wsCounter).get("WORKSPACE_ID")))					{						wsIndex = wsCounter;						break;					}				}				if (wsIndex == -1)				{					HashMap wsMap = new HashMap();					wsMap.put("WORKSPACE_ID", rowMap.get("WORKSPACE_ID"));					wsMap.put("WORKSPACE_DISPLAY_NM", rowMap.get("WORKSPACE_DISPLAY_NM"));					wsMap.put("WORKSPACE_LAYOUT", rowMap.get("WORKSPACE_LAYOUT"));					wsMap.put("POSITION", rowMap.get("WORKSPACE_POSITION"));					wsMap.put("WORKSPACE_ACTIVATE_HANDLER", rowMap.get("WORKSPACE_ACTIVATE_HANDLER"));					wsMap.put("OD_PRODUCT", rowMap.get("WD_OD_PRODUCT"));					wsMap.put("OD_SUB_PRODUCT", rowMap.get("WD_OD_SUB_PRODUCT"));					wsMap.put("OD_USER_NO", rowMap.get("WD_OD_USER_NO"));					wsMap.put("OD_GCIF", rowMap.get("WD_OD_GCIF"));					wsMap.put("SYSTEM_WORKSPACE_IND", rowMap.get("SYSTEM_WORKSPACE_IND"));					wsMap.put("CHILD_LAYOUTS", new ArrayList<HashMap>());					wsMap.put("CUSTOMSPACE_BLOCKPOSITION", rowMap.get("CUSTOMSPACE_BLOCKPOSITION"));					wsMap.put("WD_CHANNEL_ID", rowMap.get("CHANNEL_ID"));					wsMap.put("BUNDLE_KEY", rowMap.get("BUNDLE_KEY"));					if(rowMap.get("WORKSPACE_ID").equals(prefWorkspace)){						wsList.add(0,wsMap);							wsIndex = 0;					}else{					wsList.add(wsMap);					wsIndex = wsList.size() - 1;					}				}				if (wsIndex > -1)				{					int lytIndex = -1;					if (wsList.size() > 0)					{						ArrayList<HashMap> lytList = (ArrayList) wsList.get(wsIndex).get("CHILD_LAYOUTS");						if (null != lytList)						{							if (lytList.size() > 0)							{								for (int lytCounter = 0; lytCounter < lytList.size(); lytCounter++)								{									if (null != rowMap.get("LAYOUT_ID")											&& rowMap.get("LAYOUT_ID").equals(lytList.get(lytCounter).get("LAYOUT_ID")))									{										lytIndex = lytCounter;										break;									}								}							}							if (lytIndex == -1)							{								HashMap lytMap = new HashMap();								lytMap.put("LAYOUT_ID", rowMap.get("LAYOUT_ID"));								lytMap.put("LAYOUT_DISPLAY_NM", rowMap.get("LAYOUT_DISPLAY_NM"));								lytMap.put("LAYOUT_LAYOUT", rowMap.get("LAYOUT_LAYOUT"));								lytMap.put("LAYOUT_PROPORTION", rowMap.get("LAYOUT_PROPORTION"));								lytMap.put("IS_PARENT_IND", rowMap.get("IS_PARENT_IND"));								lytMap.put("POSITION", rowMap.get("WL_POSITION"));								lytMap.put("PARENT_LAYOUT", rowMap.get("PARENT_LAYOUT"));								lytMap.put("OD_PRODUCT", rowMap.get("LD_OD_PRODUCT"));								lytMap.put("OD_SUB_PRODUCT", rowMap.get("LD_OD_SUB_PRODUCT"));								lytMap.put("OD_USER_NO", rowMap.get("LD_OD_USER_NO"));								lytMap.put("OD_GCIF", rowMap.get("LD_OD_GCIF"));								lytMap.put("LD_CHANNEL_ID", rowMap.get("LD_CHANNEL_ID"));								lytMap.put("LD_BUNDLE_KEY", rowMap.get("LD_BUNDLE_KEY"));								lytMap.put("CONTEXT_APP_WIDGET", rowMap.get("CONTEXT_APP_WIDGET"));								lytMap.put("CHILD_WIDGETS", new ArrayList<HashMap>());								lytList.add(lytMap);								lytIndex = lytList.size() - 1;							}							if (lytIndex > -1)							{								ArrayList<HashMap> wgtList = (ArrayList) lytList.get(lytIndex).get("CHILD_WIDGETS");								if (wgtList != null)								{									if (!rowMap.get("WIDGET_ID").equals(""))									{										HashMap wgtMap = new HashMap();										wgtMap.put("WIDGET_ID", rowMap.get("WIDGET_ID"));										wgtMap.put("POSITION", rowMap.get("LW_POSITION"));										wgtMap.put("BLOCK_POSITION", rowMap.get("BLOCK_POSITION"));										wgtMap.put("CLOSED_IND", rowMap.get("CLOSED_IND"));// added										wgtMap.put("WGT_TITLE", rowMap.get("WGT_DISPLAY_NM"));// added										wgtMap.put("DEFAULT_WIDGET_IND", rowMap.get("DEFAULT_WIDGET_IND"));										wgtMap.put("NO_OF_ROWS", rowMap.get("NO_OF_ROWS"));										wgtMap.put("RESIZE_IND", rowMap.get("WGT_RESIZE_IND"));										wgtMap.put("WIDGET_PXL_HT", rowMap.get("WGT_HT_IN_PIXELS"));										wgtMap.put("WI_CHANNEL_ID", rowMap.get("WI_CHANNEL_ID"));										wgtMap.put("WIDGET_BUNDLE_KEY", rowMap.get("WIDGET_BUNDLE_KEY"));										wgtMap.put("WGT_HEADER_IND", rowMap.get("WIDGET_HEADER_IND"));										wgtMap.put("APPS_IN_A_ROW", rowMap.get("APPS_IN_A_ROW"));										wgtMap.put("CONTAINER_FLAG", rowMap.get("CONTAINER_FLAG"));										wgtList.add(wgtMap);									}								}							}						}					}				}			}		} catch (ViewDefinitionException viewDefinitionException)		{			throw new DatabaseException(viewDefinitionException);		}		return wsList;	}}