/** * Copyright 2014. Intellect Design Arena Limited. All rights reserved.  *  * These materials are confidential and proprietary to Intellect Design Arena  * Limited and no part of these materials should be reproduced, published, transmitted * or distributed in any form or by any means, electronic, mechanical, photocopying,  * recording or otherwise, or stored in any information storage or retrieval system  * of any nature nor should the materials be disclosed to third parties or used in any  * other manner for which this is not authorized, without the prior express written  * authorization of Intellect Design Arena Limited. *  */package com.intellectdesign.canvas.viewdefinition.handler.cache;import java.util.HashMap;import java.util.List;import com.intellectdesign.canvas.cache.handler.CacheDataBuilder;import com.intellectdesign.canvas.database.DatabaseException;import com.intellectdesign.canvas.logger.Logger;import com.intellectdesign.canvas.viewdefinition.ViewDefinitionException;import com.intellectdesign.canvas.viewdefinition.ViewDefinitionInstruction;/** * Handler class for System View cache which maintains all the available System view details. *  * @version 1.0 */public class SystemViewCacheDataBuilder extends CacheDataBuilder{	/**	 * Initializes the cache with system view details details	 * 	 * @param session	 * @return List	 */	protected List initializeCache(HashMap params)	{		logger.ctinfo("CTVDF00229");		List returnList = null;		try		{			returnList = retrieveAllSystemViews();		} catch (DatabaseException dbEx)		{			logger.cterror("CTVDF00230");			// Exception is caught and eaten up since this is only while refreshing cache		}		if (returnList == null || returnList.isEmpty())			logger.ctdebug("CTVDF00231");		logger.cterror("CTVDF00232");		return returnList;	}	/**	 * Provide empty implementation since no validation is required	 * 	 * @param hm	 * @return	 */	protected String validateParameters(HashMap params)	{		return null;	}	/**	 * Retrieves the entire set of system views present in the view definition table	 * 	 * @throws DBexception	 * @return Returns the List of System Views	 */	public List retrieveAllSystemViews() throws DatabaseException	{		List listSystemViews = null;		logger.ctinfo("CTVDF00233");		ViewDefinitionInstruction viewDefinitionInstruction = new ViewDefinitionInstruction();		try		{			listSystemViews = viewDefinitionInstruction.getSystemViews();		} catch (ViewDefinitionException viewDefinitionException)		{			logger.cterror("CTVDF00234", viewDefinitionException);			throw new DatabaseException(viewDefinitionException);		}		logger.ctinfo("CTVDF00235");		return listSystemViews;	}	private static Logger logger = Logger.getLogger(SystemViewCacheDataBuilder.class);}