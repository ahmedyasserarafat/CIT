/** * Copyright 2014. Intellect Design Arena Limited. All rights reserved.  *  * These materials are confidential and proprietary to Intellect Design Arena  * Limited and no part of these materials should be reproduced, published, transmitted * or distributed in any form or by any means, electronic, mechanical, photocopying,  * recording or otherwise, or stored in any information storage or retrieval system  * of any nature nor should the materials be disclosed to third parties or used in any  * other manner for which this is not authorized, without the prior express written  * authorization of Intellect Design Arena Limited. *  */Ext.ns("iportal.view");/** * Multi View it self is object will take required configuration propertys to * build MultiView Component. *  * @class MultiView * @extends Ext.util.Observable */iportal.view.MultiView = Ext.extend(Ext.Container, {	constructor : function (config){		iportal.view.MultiView.superclass.constructor.call(this, config);		/**		 * 'viewchange' will be called as and when user changes view using view		 * Selector combo available in widget header. This handler will be		 * called with the following parameters.		 * 		 * @param svid -		 *            System View Id		 * @param vdef -		 *            View definition of selected View Event cellclick and		 *            contextclick are related to List View and drilldown is		 *            related to Group View. if view type is List View,Multi		 *            View will Call cellclick handler whenever user clicks on		 *            any cell in any row, excluding Context column, If View		 *            Type is Group View then multi View will call widget		 *            drilldown handler, as and when user clicks on any Drill		 *            down enabled column. cellclick handler will be called with		 *            the following parameters		 * @param colId -		 *            Column Id		 * @param colVal -		 *            Value of column clicked		 * @param record -		 *            Full record of clicked row contextclick handler will be		 *            called with the following parameters		 * @param domid -		 *            Id of dom where menu needs to show		 * @param colId -		 *            Column Id		 * @param colVal -		 *            Value of column clicked		 * @param record -		 *            Full record of clicked row drilldown handler will be		 *            called with the following parameters		 * @param colVal -		 *            Value of column clicked		 * @param colId -		 *            Column Id		 * @param path -		 *            The path for drill down cell including bucket column also		 *            preferencechange handler will be called with the following		 *            parameters		 * @param widgetid -		 *            Id of widget for which preferences has changed		 */		this.addEvents(			/**			 * 			 */			"viewchange",			/**			 * 			 */			"cellclick", 			/**			 * 			 */			"celldblclick",			/**			 * 			 */			"contextclick", 			/**			 * 			 */			"drilldown", 			/**			 * 			 */			"load",			/**			 * 			 */			"preferencechange",			/**			 * 			 */			"bbuttonclick",			/**			 * 			 */			"treeclick",			/**			 * 			 */			"treecontextclick",			/**			 * 			 */			"nodeClick",			/**			 * 			 */			"flowClick",			/**			 * 			 */			"widgetexpand", 			/**			 * 			 */			"dataModified", 			/**			 * 			 */			"forminitialized",			/**			 * 			 */			"formbeforeinitialize",			/**			 * 			 */			"highlight",			/**			 * 			 */			"resizeafterdatacall",			/**			 * 			 */			"rowclick",			/**			 * 			 */			"verifydate",			/**			 * this event will be fired when in an advanced grouping grid a row is expanded			 */			"onRowExpand",			/**			 * this event will be fired when in an advanced grouping grid an expanded row is collapsed			 */			"onRowCollapse",			/**			 * this event will be fired when in an advanced grouping most child row context clicked			 */ 			"advGrpGridChildContextClick",			/**			 * this event will be fired when in an advanced grouping most child row selections			 */ 			"advGrpGridChildRowClick",			/**			 * 			 */			"graphdrilldown",						/**			 * this event will be fired before a template for creating the Node of ORG view. it will retunr the HTML for Node. 			 */			"orgtemplateinitializer"		);		Ext.apply(this, config);		var event, mvc;		for (event in this.listeners) {			this.on(event, this.listeners[event], this);		}		this.on("widgetexpand", this.onWidgetExpand, this); 		if (this.listeners != null) {			for (func in this.listeners) {				if (func != null) {					this[func] = this.listeners[func].createDelegate(this);				}			}		}		if (this.services != null) {			for (func in this.services) {				if (func != null) {					this[func] = this.services[func].createDelegate(this);				}			}		}		mvc = iportal.view.MultiViewConstants;		this.renderTo = Ext.isEmpty(this.renderTo) ? mvc.BODY : this.renderTo;		this.expandDepth = Ext.isEmpty(this.expandDepth) ? mvc.EXPAND_FIRST_LEAF : this.expandDepth;		this.on("beforeadd",this.triggerbeforeInitialize , this);/*Changes Made for EXTJS Framework*/		this.on("added", this.updateOwner, this);		this.ignoreFormPanel = false;		this.init();		this.mv = this;	},	/** Unregistering all the listers attached */	onRemove : function (c){		try{			if(this.mvh.vmd.VIEW_MD){				if(this.mvh.vmd.VIEW_MD.FLD_IS_DATA_CACHED === 'Y' && this.mvh.vmd.VIEW_MD.FLD_DATA_CACHE_SCOPE === 'INSTANCE'){					var requestParams = {};					requestParams['INPUT_ACTION']='CLEAR_EHCACHE_DATA_ACTION';					requestParams['PRODUCT_NAME']= this.mvh.vmd.VIEW_MD.PRODUCT_CODE;					requestParams['INPUT_SUB_PRODUCT']= this.mvh.vmd.VIEW_MD.SUB_PRODUCT_CODE;					requestParams['INPUT_FUNCTION_CODE']=this.mvh.vmd.VIEW_MD.FUNCTION_CODE;					requestParams['WIDGET_ID']= this.itemId;					requestParams['VIEW_ID']= this.mvh.vmd.VIEW_MD.VIEW_ID;					requestParams['PAGE_CODE_TYPE']='VDF_CODE';						iportal.jsutil.executeClearEhCacheHandler(requestParams);				}								this.mvh.mvConf.fireEvent(CWEC.CTAPPONDESTROY);   //Changing Event Name						}		}catch(e) {			LOGGER.error("problem in data cache clear process in onRemove() of multiview : ");		}				try {			for (event in this.listeners) {				this.un(event, this.listeners[event], this.scope);			}		} catch (e) {			LOGGER.error(e);		}	},	widgetResponseData:'',     	skipDataResult:false, 	height : iportal.jsutil.getWidgetResizeHeight(),	/**	 * New flag added for cases when the widget are gettign loaded inside the	 * popup and needs some lag before it gets loaded	 */	cacheMetaData : true,	/**	 * true to set livegrid will put last update date and time in bottom button bar.	 */	lastupdateInfoReq : false,	/**	 * The listeners will be called in scope	 */	scope : this,	/**	 * The widget name which should be created and display when clik of pullout	 * icon	 */	pullOutWidget : null,	/**	 * In pullout widget class mulview object this config value should be set as	 * true.	 */	isPullOutWidget : false,	/**	 * Collapsiable icon will be display in header if value is true.	 */	collapsible : false,	/**	 * Intended to indicate where to render content Possible modes are BODY -	 * Render to body,this is Default value MODAL_WIN - Render in new Modal	 * Window NON_MODAL_WIN - Render in new non modal window	 */	renderTo : null,	/**	 * Intended to menctioned title for modal/non-modal window. P.S: This will	 * be applicable only renderTo value is MODAL_WIN/NON_MODAL_WIN	 */	title : '',	/**	 * id of widget for which views needs to be fetch from VDF	 * 	 * @type - String	 */	id : null,	/**	 * defaults to true, Set false to hide view selection combo in header.	 * 	 * @type Boolean	 */	selector : true,	/**	 * Intended to pass request parameter values while fetching list of views	 * for given widget id, Default values are {"INPUT_ACTION" :	 * "INIT_HEADER_ACTION", "PRODUCT_NAME" : "CUSER", "INPUT_FUNCTION_CODE" :	 * "VSBLTY", "INPUT_SUB_PRODUCT" : "CUSER"}	 * 	 * @type Object	 */	reqParms : {},	/**	 * This config option is applicable for GroupViews. Possible values are	 * COLLAPSE_ALL : Indicates Collapse All EXPAND_FIRST_LEAF : Expand nodes of	 * first Group.This is default EXPAND_ALL : Indicates Expand All.	 */	expandDepth : null,	/***************************************************************************	 * Will me updated by multi widget containers in order to set draggable	 * property of mvh to falase	 **************************************************************************/	loadingInContainer : false,	/**	 * To be marked as true on if the widget is directly getting loaded under a	 * portlet. This flag will be used to pass tool and title ref to the portlet	 * container header.	 */	isParentPortlet : false,	/**	 * will be used by the container in case the container wants the view to	 * show its tool icon and menu within itself rather then rather than	 * transferring to parent	 */	isLoadingToolsInside : false,	/**	 * This flag will be true only in case the view's corresponding widget is	 * loaded under MultiWidgetSwitch container. This flag will be used for	 * updating the title as well as the switch view menu of the widget.	 * 	 * @see iportal.widget.MultiWidgetSwitch	 */	enableWidgetSwitch : false,	/**	 * will be used by the container in case the container wants the view to	 * show its tool icon and menu within itself rather then rather than	 * transferring to parent	 */		isTbarCollapsed : true,		showToolsInsideWidget : function (){		this.isLoadingToolsInside = true;	},	/**	 * will be called by the Portlet to update a widget's height after resizing it	 */	updateHeight : function (height){		this.setHeight(height);		this.height=height;		if (this.mvh != null) {			this.mvh.updateHeight(height);		}	},	updateWidth : function(width){		this.setWidth(width);		this.width=width;	},	/**	 * Will be called when the portlet raise the WidgetExpand event.	 */	onWidgetExpand : function (){		if (this.mvh != null && this.mvh.widgetExpand) {			this.mvh.widgetExpand();		}	},	/**	 * OnChange of currency ,Passing the currency value to	 * immediate parent	 * 	 * @param cmp	 * @param rec	 */	onCurrChange : function (currency){		return this.mvh.onCurrChange(currency);	},	/**	 * Widgets are expected to override this method to register specific api to	 * the communication manager	 */	getServices : function (){		if (this.services != null) {			var apiArr = new Array();			for (func in this.services) {				apiArr[apiArr.length] = func;			}			return apiArr;		} else {			return [];		}	},	getAd : function(){		return this.getComponent(0).getIframePanel();	},	getCurrentViewObj : function(){		return this.find('itemId',IMM.getDefaultView(this.itemId))[0];	},	/**	 * Returns the Ext container Component which contains the google map Object	 */	getMap : function(){		var mapObjSelector = function(comp){			if(comp.itemId && comp.itemId === "MapContainer"){				return true;			}		}		var mapCmp = this.findBy(mapObjSelector);		return mapCmp[0];	},	/**	 * Return the tool menu instance from the view. All the menu actions will	 * also be mapped appropriately with the view	 */	getToolsMenuItems : function (){		return this.mvh.getToolsMenuItems(this.mvh);	},	/**	 * Method to handle custom tool action	 * add custom tools in the root of the multi view header	 * @ param 	 * customToolId	 */	getCustomToolsMenuItems: function(menuId){		return this.mvh.getCustomToolsMenuItems(this.mvh,menuId);	},	/**	 * The method return the child menu of the parent tool.	 * @param menuId	 * */	handleCustomToolAction : function (customToolId,toolScope){		return this.mvh.handleCustomToolAction(this.mvh,customToolId,toolScope);	},	getCurrencyIndicator : function() {		return this.mvh.getCurrencyInd();	},	getSwitchViewIcon : function(){		return this.mvh.getSwitchViewIcon(this.mvh);	},	getSwitchChartIcon : function(){		return this.mvh.getSwitchChartIcon(this.mvh);	},	/**	 * To get the tools map of the widget header.	 */	getToolsMap : function ()	{		return this.mvh.getToolsMap(this.mvh);	},	/**	 * Return the preference menu instance from the view. All the menu actions	 * will also be mapped appropriately with the view	 */	getPreferenceMenuItems : function (){		return this.mvh.getPreferenceMenuItems(this.mvh);	},				getTbarConf: function()	{		return this.tbarconf;	},				/**	 * Return the appropriate menu handler.	 */	handleToolAction : function (menuItem){		return this.mvh.handleToolAction(this.mvh, menuItem);	},		/**	 * Will be triggered everytime when the beforeadd event is fired. i.e)Everytime 	 * before the view of the App gets rendered,this will get fired. 	 */	triggerbeforeInitialize : function()	{			 this.fireEvent(CWEC.CTAPPBEFOREINITIALIZE);//Changing Event Name	},	/**	 * Will be used to update the parent for title and menu flags, also will be	 * called by the AJAX success handler in case the view meta is is getting	 * downloaded only now	 */	updateOwner : function (){		/**		 * In case the immediate parent is portlet, then send header and title		 * infomartion as per the metadata		 */		/**		 * A portlet or a MultiWidgetSwitch for updating the widget's tilte when the user		 * switches from one widget to another		 */		if (this.ownerCt && (this.isParentPortlet === true || this.enableWidgetSwitch === true) && this.mvh) {		//	this.ownerCt.setTitle(this.mvh.getSystemViewTitle());			this.ownerCt.setTitle(this.mvh.viewsTitles[this.mvh.getSelectedViewId()]);		}		/**		 * telling the parent, either a multi widget container or the portlet if		 * tool icon should be visible or not		 */		if (this.ownerCt && this.ownerCt.showToolIcon && this.mvh != null) {				this.ownerCt.showToolIcon(this.mvh.isToolsAvailable());		}		/**		 * This function is calling the showBottomBarButtons function of the		 * immediate parent. It is used to display the bottomBarItems in the		 * parent object's bbar.		 */		if (this.ownerCt && this.ownerCt.showBottomBarButtons && this.mvh != null) {			this.ownerCt.showBottomBarButtons(this.mvh.createBBarButtons());		}	},	init : function (){		this.itemId = this.id;		this.id = null;		if ((!Ext.isDefined(IMM.getView(this.reqParms.VIEW_ID)) && !IMM.isWidgetExist(this.itemId))					|| (!this.cacheMetaData)) {			this.id = null;			this.reqParms.WIDGET_ID = this.itemId;			IMM.initAjaxReq({				params : this.reqParms,				scope : this,				successhandler : this.initHeaderSuccessHandler			});		} 		else {			var task = new Ext.util.DelayedTask(this.initHeaderSuccessHandler, this, [ true ]);			task.delay(100);		}	},	/**	 * Intended to get Selected View id for given widget	 */	getSelectedViewId : function (widgid){		return Ext.getCmp(widgid).getSelectedViewId();	},	/**	 * Success handelr of init function	 */	initHeaderSuccessHandler : function (fromAJAX){		var that = this;		CBXDOWNLOADMGR.requestScripts(cbx.downloadProvider.getMergedArray(["FORM_VIEW","GLOBAL_DATE_FILTER"]),function(){			var viewID = IMM.getDefaultView(that.itemId);			var viewMD = IMM.getView(viewID);			var defaultFilterValue = " ";			var columnName = null;			var columnId = null;			var frmManger = null;			var minDate = "";			var maxDate = "";			var flag = null;			var maxSelectionPeriodUnit = null; 			var maxSelectionPeriodValue = null;			var globalMinDate = null;			if (viewMD.VIEW_MD.FLD_GLOBAL_DATE_FILTER_IND == 'Y'							&& viewMD.VIEW_MD.FLD_VIEW_TYPE != 'IFRAME' && viewMD.VIEW_MD.FLD_VIEW_TYPE != 'ADS') {				if(viewMD.VIEW_MD.FLD_POSSIBLE_DATE_FILTERS.length != 0){					for (var i=0,len=viewMD.VIEW_MD.FLD_POSSIBLE_DATE_FILTERS.length;i<len;i++ ){						if("Y" === viewMD.VIEW_MD.FLD_POSSIBLE_DATE_FILTERS[i].IS_DEFAULT_FILTER){							defaultFilterValue = viewMD.VIEW_MD.FLD_POSSIBLE_DATE_FILTERS[i].FROM_DATE +'|'													+ viewMD.VIEW_MD.FLD_POSSIBLE_DATE_FILTERS[i].TO_DATE+'|'+i;						}							else if(viewMD.VIEW_MD.FLD_POSSIBLE_DATE_FILTERS[i].FROM_DATE === '-1'){							flag = i;						}					}					if(defaultFilterValue === ""){						if(flag != null){							defaultFilterValue = viewMD.VIEW_MD.FLD_POSSIBLE_DATE_FILTERS[flag].FROM_DATE +'|'												+ viewMD.VIEW_MD.FLD_POSSIBLE_DATE_FILTERS[flag].TO_DATE+'|'+flag;						}					}					columnId = viewMD.VIEW_MD.FLD_POSSIBLE_DATE_FILTERS[0].COLUMN_ID;						for(var i=0; i< viewMD.VIEW_MD.FLD_COLUMN_LIST.length; i++){						if(columnId == viewMD.VIEW_MD.FLD_COLUMN_LIST[i].FLD_COLUMN_ID){							var columnNmKey = viewMD.VIEW_MD.FLD_COLUMN_LIST[i].FLD_COLUMN_DISPLAY_NAME_KEY;							columnName=CRB.getBundle(viewMD.VIEW_MD.FLD_BUNDLE_KEY)['LBL_'+columnNmKey+'_GDF'];							if(cbx.isEmpty(columnName)) {								columnName = CRB.getBundle(viewMD.VIEW_MD.FLD_BUNDLE_KEY)['LBL_'+columnNmKey];							}													}												}										}				if(viewMD.VIEW_MD.FLD_DATE_FILTERS_RANGE.length !=0){					minDate = viewMD.VIEW_MD.FLD_DATE_FILTERS_RANGE[0].MIN_DATE;					maxDate = viewMD.VIEW_MD.FLD_DATE_FILTERS_RANGE[0].MAX_DATE;					maxSelectionPeriodValue = viewMD.VIEW_MD.FLD_DATE_FILTERS_RANGE[0].MAX_SELECTION_PERIOD_VAL ? viewMD.VIEW_MD.FLD_DATE_FILTERS_RANGE[0].MAX_SELECTION_PERIOD_VAL : "",					maxSelectionPeriodUnit = viewMD.VIEW_MD.FLD_DATE_FILTERS_RANGE[0].MAX_SELECTION_PERIOD_UNIT ? viewMD.VIEW_MD.FLD_DATE_FILTERS_RANGE[0].MAX_SELECTION_PERIOD_UNIT : "",					globalMinDate=viewMD.VIEW_MD.FLD_DATE_FILTERS_RANGE[0].GLOBAL_MIN_DATE ? viewMD.VIEW_MD.FLD_DATE_FILTERS_RANGE[0].GLOBAL_MIN_DATE : ""				}					var globalDateFilterObject = {					"VIEW_ID":viewID,					"WIDGET_ID":that.itemId,					"DEFAULT_FILTER_VALUE":defaultFilterValue,					"COLUMN_DISP_NAME_KEY" :columnName,					"MIN_DATE": minDate,					"MAX_DATE": maxDate,					"COLUMN_ID":columnId,					"MAX_SELECTION_PERIOD_UNIT": maxSelectionPeriodUnit,					"MAX_SELECTION_PERIOD_VALUE": maxSelectionPeriodValue,					"GLOBAL_MIN_DATE":globalMinDate				};				if(that.findParentByType('panel') instanceof cbx.formElement.WidgetPanel){					that.ignoreFormPanel = true;				} 				frmManger = cbx.globaldatefilterform.filterPanelForm(that,globalDateFilterObject);				that.add(new cbx.panel.ButtonScrollingPanel({									amountOfxScroll:60,						height:38,					autoScroll: false,					cls : 'date-scroll-panel', 					scrollCmp:[{width:750,items:[frmManger.getFormView()]}]			    }));			}		if(viewMD.VIEW_MD.FLD_TBAR_BUTTONS && viewMD.VIEW_MD.FLD_TBAR_BUTTONS.TBAR_CONFIG && viewMD.VIEW_MD.FLD_TBAR_BUTTONS.TBAR_CONFIG[0]){  			var formId= viewMD.VIEW_MD.FLD_TBAR_BUTTONS.TBAR_CONFIG[0].FORM_ID;							var fm = new cbx.form.FormManager({					formId : formId,					ignoreFormPanel : true,					additionalConfig : {						"MULTI_VIEW" : that,						"VIEW_METADATA":viewMD					}				});									var formWrapper = fm.getFormView();								that.tbarconf = new Ext.Panel({					items:{					autoScroll: true,					height:100,					items:[formWrapper]					},					baseCls:'slimPHeader',					collapsed:true,					listeners:{					'expand':function(comp){					var wgtHeight = that.getHeight();					var height = comp.getComponent(0).getComponent(0).el.getHeight();					if(wgtHeight<height){					height = wgtHeight;					}					comp.getComponent(0).setHeight(height);					comp.setHeight(height);					}					}					});								that.add(that.tbarconf);								    }										if (Ext.isEmpty(that.bundle)) {				that.bundle = viewMD.VIEW_MD.FLD_BUNDLE_KEY;			}					that.mvh = new iportal.view.MultiViewHeader({				itemId : that.itemId,				mvConf : that			});						if(viewMD.VIEW_MD.FLD_GLOBAL_DATE_FILTER_IND == 'Y' && that.mvh.allViews[0].IS_ENTITLED == 'N'){				that.getComponent(0).hide();			}			/** Code to add a standard note text above the bottom bar of the			 * widget,if the detail message indicator is enabled			 */			/**			 * Code added to find context column indicator form view meta data			 * information to add a standard note text above the bottom bar of the			 * widget,if the context column indicator is enabled			 */			if (viewMD.VIEW_MD.FLD_CONTEXT_COLUMN && viewMD.VIEW_MD.FLD_CONTEXT_COLUMN === 'Y'						&& viewMD.VIEW_MD.FLD_VIEW_TYPE != 'ADS' && viewMD.VIEW_MD.FLD_VIEW_TYPE != 'IFRAME' 							&& iportal.preferences.getStandardNoteReq() == true) {				that.snt = {					xtype : "container",					cls : 'x-stdnote-panel',					height : iportal.jsutil.getStandardTextNotePanelHeight(true),					autoScroll: true, 					html : CRB.getFWBundle() && CRB.getFWBundle()['LBL_' + viewID + '_STANDARDNOTE'] ?							CRB.getFWBundle() && CRB.getFWBundle()['LBL_' + viewID + '_STANDARDNOTE'] : CRB.getFWBundle()								&& CRB.getFWBundle()['LBL_CONTEXT_COLUMN']								? CRB.getFWBundle()['LBL_CONTEXT_COLUMN'] : 'Context Action Enabled for this grids'				};			} 			else {				that.snt = null;			}						if (viewMD.VIEW_MD.FLD_DETAIL_MSG_IND === 'Y' && viewMD.VIEW_MD.FLD_VIEW_TYPE != 'ADS' 				&& viewMD.VIEW_MD.FLD_VIEW_TYPE != 'IFRAME') {			var msg="";			if(CRB.getBundle(viewMD.VIEW_MD.PRODUCT_CODE.toLowerCase())== undefined) {				msg=viewMD.VIEW_MD.FLD_DETAIL_MSG_LBL ?viewMD.VIEW_MD.FLD_DETAIL_MSG_LBL:CRB.getFWBundle()["LBL_NO_MSG"];			}			else {				msg=viewMD.VIEW_MD.FLD_DETAIL_MSG_LBL ?( CRB.getBundle(viewMD.VIEW_MD.PRODUCT_CODE.toLowerCase())[viewMD.VIEW_MD.FLD_DETAIL_MSG_LBL] ? CRB.getBundle(viewMD.VIEW_MD.PRODUCT_CODE.toLowerCase())[viewMD.VIEW_MD.FLD_DETAIL_MSG_LBL]:viewMD.VIEW_MD.FLD_DETAIL_MSG_LBL):CRB.getFWBundle()["LBL_NO_MSG"];			}				that.snt={					xtype : "container",					cls : 'x-stdnote-panel',					height : iportal.jsutil.getStandardTextNotePanelHeight(true),					autoScroll: false,					html :   msg				};			}			else {				that.snt = null;			}				/**		 * Code added to find context column indicator form view meta data		 * information to add a standard note text above the bottom bar of the		 * widget,if the context column indicator is enabled		 */		if (viewMD.VIEW_MD.FLD_CONTEXT_COLUMN && viewMD.VIEW_MD.FLD_CONTEXT_COLUMN === 'Y'					&& viewMD.VIEW_MD.FLD_VIEW_TYPE != 'ADS' && viewMD.VIEW_MD.FLD_VIEW_TYPE != 'IFRAME' 						|| iportal.preferences.getStandardNoteReq() == true) {						var context=CRB.getFWBundle() && CRB.getFWBundle()['LBL_' + viewID + '_STANDARDNOTE'] ?									CRB.getFWBundle() && CRB.getFWBundle()['LBL_' + viewID + '_STANDARDNOTE'] : CRB.getFWBundle()									&& CRB.getFWBundle()['LBL_CONTEXT_COLUMN']? CRB.getFWBundle()['LBL_CONTEXT_COLUMN'] : 'Context Action Enabled for this grids';		if(Ext.isEmpty(that.snt)) {			that.snt = {				xtype : "container",				cls : 'x-stdnote-panel',				height : iportal.jsutil.getStandardTextNotePanelHeight(true),								autoScroll: false, 							html : context			};		} 		else {			that.snt.html+="<br/>"+context;		}	}						/**			 * New header component to the MultiView new check added			 * before inserting the mvh object for multi widgets to disable the			 * draggable property to false and then add the mvh to mv by themselve.			 * 			 * @see iportal.widget.MultiWidgetTab.js | tabSelectionHandler()			 */			setTimeout(function (){ 			if (fromAJAX == null || fromAJAX == true) {				/**				 * include standard note text for a widget if the context column indicator or detail messsage indicator is enabled				 */				if (that.snt != null) {					that.mvh.add(that.snt);				}				that.add(that.mvh);												that.doLayout();			}				that.updateOwner();				if(frmManger){					that.mvh.applyDateFilter(frmManger.getModelData(),false);				}			}, 1000);			var isEntitled=IMM.isWidgetEntitled(that.itemId);			var isWidgetMarkedOpen= IMM.isWidgetMarkedOpen(that.itemId);			if(!isEntitled && !isWidgetMarkedOpen){				cbx.CommManager.raiseEvent('widgetnotentitled', {WIDGET_ID:that.itemId});			}			if(isWidgetMarkedOpen){				IMM.markWidgetOpened(that.itemId, 'N');			}		});	},	doAfterPrefChanges : function (pinfo, reRenderFalg){		this.mvh.doAfterPrefChange(pinfo, reRenderFalg);	},	/**	 * Intended to reRender widget	 */	reRenderWidget : function (wid){		this.reqParms.WIDGET_ID = wid;		IMM.initAjaxReq({			params : this.reqParms,			scope : this,			successhandler : this.initHeaderSuccessHandler		});	},	/**	 * Intended to update selected record values with given object	 */	refreshSelectedRow : function (newRec){		if (Ext.isObject(newRec)) {			var grid, store, selectionModel, selectedRec, selectedRecIndex, field;			grid = Ext.getCmp(this.itemId + '__GRID');			store = grid.getStore();			selectionModel = grid.getSelectionModel();			selectedRec = selectionModel.getSelected();			selectedRecIndex = store.indexOf(selectedRec);			for ( var field in newRec) {				selectedRec.set(field, newRec[field]);			}			selectedRec.commit();		 }	 },	 /**Intended to reload the data of any VDF Widget. Gagan April 2012- Depricated*/	 refreshWidgetData:function(params){		 if(!cbx.isEmpty(params))			 this.applyToBaseParams(params);		 if(this.mvh){			 this.mvh.refresh();		 }	},	 /**Intended to reload the data of any VDF Widget.*/	 refreshWidget:function(params){		 if(!cbx.isEmpty(params))			 this.applyToBaseParams(params);		 if(this.mvh){			 this.mvh.refresh();		 }	},	/**	 * This method is used to get form panel object.	 */	getFormPanel : function()	{		return this.mvh.getFormPanel();	},		/**	 * This method is used to apply parameters to base params. 	 */	applyToBaseParams:function(params)	{		var grid=this.mv.mvh.getGridCmp();    	if(grid!=null){    		var store = grid.getStore();			Ext.apply(store.baseParams,params);    	}	},	/**	 * The API is defined to retrieve the compute height based on the row count recieved.	 * It calculates the height by adding the panel,grid header,bbar height. Here we check for the	 * global date filter, show as toolbar if it is available & update the compute height accordingly 	 ****/	computeHeight : function (rowCount){		var panelHeader= this.mvh.vmd.VIEW_MD.FLD_EQCCY_EXIST_IND == 'Y' ? 26 : 15;		var gridHeaderHeight=0;		if(this.mvh.vmd.VIEW_MD.FLD_GROUP_HEADER_REQD == 'Y'){			gridHeaderHeight = iportal.jsutil.getGridGroupHeaderHeight();		}		else{			gridHeaderHeight = iportal.preferences.getGridHeaderHeight();		}		var rowHeight = iportal.preferences.getGridCellHeight();		rowCount = (rowCount === 0 || rowCount == null ||rowCount <= (iportal.jsutil.getDefaultRowCount()) || rowCount == '')					? iportal.jsutil.getDefaultRowCount() : rowCount;		var totalrowHeight = (rowCount * rowHeight);		var computedHeight = ((totalrowHeight + gridHeaderHeight+ panelHeader ));		var barHeight = iportal.jsutil.getBBarHeight(this.mvh.getGridCmp().bbar);		computedHeight = computedHeight + barHeight;		var globalDateFilterIndicator = this.mvh.vmd.VIEW_MD.FLD_GLOBAL_DATE_FILTER_IND;		if (globalDateFilterIndicator && globalDateFilterIndicator == 'Y') {			computedHeight = computedHeight + iportal.jsutil.getFilterPanelHeight(true);		}		if((this.mvh.vmd.VIEW_MD.FLD_CONTEXT_COLUMN && this.mvh.vmd.VIEW_MD.FLD_CONTEXT_COLUMN === 'Y')||this.mvh.vmd.VIEW_MD.FLD_DETAIL_MSG_IND === 'Y'){			computedHeight=computedHeight + iportal.jsutil.getStandardTextNotePanelHeight(true);		}		if((this.mvh.IND.SHOW_AS_TOOLBAR_IND == true) ){			computedHeight= computedHeight + iportal.jsutil.getShowAsToolBarHeight();		}		return computedHeight;	},	/**	 * The callback method once the animations are done.	 * This is responsible for creating the panel with buttons,adding it to the multiview and	 * rendering this.	 */	shuffleItems : function(){		var scope = this.scope;		var rb = CRB.getFWBundle();		var appWidget = iportal.workspace.metadata.getCurrentWorkspace().getWidgetContainer().appMVRegistry.getWidget(this.appId); 		//var appWidget = scope.appMVRegistry.getWidget(this.appId); 		/**		 * to resize the portal back to the initial size if a form has been rendered.		 */		iportal.jsutil.doPortalSizing(appWidget);		var appViewId = IMM.getDefaultView(appWidget.itemId);		var panel = appWidget.find('itemId',appViewId)[0];		/**		 * Destroying the existing panel to completely destroy all the forms and the		 * other panels rendered inside		 */		var contentPanel = panel.find("name","content-panel")[0];		if(!Ext.isEmpty(contentPanel)){			for(var i=0;i<contentPanel.items.length;i++){				contentPanel.items.itemAt(i).hide();			}			contentPanel.destroy();		}		/**		 * Re-creating the content-panel		 * Finally adding to the owner MV to render the new panel		 * 		 */		contentPanel = scope.createContentPanel(rb,this.record,this.scope,appWidget,this.title);		var options = {			isCBXContainer : false,			callback : function(contentPanel,appWidget,mv){				for(var i=0;i<contentPanel.items.length;i++){					contentPanel.items.itemAt(i).show();				}				mv.items.items[0].hide();				if(appWidget.loadMask !== undefined){					appWidget.loadMask.hide();				}				var fn = function(comp){					if(comp.itemId && comp.itemId.indexOf("_LAYOUT_CONTAINER") !== -1){ 						return true;					}				};				var layoutobj = appWidget.findParentBy(fn)				if(layoutobj.getEl().isMasked()){					layoutobj.getEl().unmask();				}			},			type : 'C'		};		panel.activateContainer(contentPanel,appWidget,options);	},	/**	 * returns the inner panel with a specified set of configuration	 */	createContentPanel : function(rb,record,widgetObj,appWid,title){		var widgetId = appWid.itemId;		var lId = appWid.LAYOUT_ID;		var grid = this.mv.mvh.getGridCmp();		var height = Number(iportal.workspace.metadata.getWidgetHtInPixels(widgetId,lId));		return new Ext.Panel({			autoWidth : true,			hidden : true,			name : 'content-panel',			layout:'table',			record : record,			itemId : grid.view_id+"_content-panel",			//itemId : Ext.getCmp(grid).view_id+"_content-panel",			gridId : widgetObj,			header : false,			autoScroll : true,			height : height,			bodyCssClass : 'x-content-panel',			/**			 * metadata handler for the number of apps in one row of the widget			 */			layoutConfig: {columns:iportal.workspace.metadata.getNumberOfApps(widgetId,lId)},			items :	CBXCONTEXTMENU.getContextAsAppItems(rb,record,widgetObj),			listeners : {				show: function(){					this.ownerCt.getLayout().activeItem = this;				},				hide: function(){					this.el.fadeOut();				}			}		});	},	getWidgetResponseData: function (){			return this.widgetResponseData;	},	getHtmlExportContentPathParamsForForms : function (params){		return this.mvh.getHtmlExportContentPathParamsForForms(params[0],params[1]);	},	getLookUpTools: function (){			return iportal.formview.getLookUpTools();	},	updateTitle: function(title){	if(title && this.mvh){	this.mvh.updateViewTitle(title);	}	}});Ext.reg('multi-view', iportal.view.MultiView);