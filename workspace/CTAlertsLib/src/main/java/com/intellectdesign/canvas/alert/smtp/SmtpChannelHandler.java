/** * Copyright 2014. Intellect Design Arena Limited. All rights reserved.  *  * These materials are confidential and proprietary to Intellect Design Arena  * Limited and no part of these materials should be reproduced, published, transmitted * or distributed in any form or by any means, electronic, mechanical, photocopying,  * recording or otherwise, or stored in any information storage or retrieval system  * of any nature nor should the materials be disclosed to third parties or used in any  * other manner for which this is not authorized, without the prior express written  * authorization of Intellect Design Arena Limited. *  */package com.intellectdesign.canvas.alert.smtp;import java.util.ArrayList;import java.util.List;import java.util.Map;import com.intellectdesign.canvas.alert.handler.AlertConstants;import com.intellectdesign.canvas.alert.handler.AlertDetail;import com.intellectdesign.canvas.alert.handler.AlertHandlerException;import com.intellectdesign.canvas.alert.handler.GenericChannelHandler;import com.intellectdesign.canvas.alert.handler.IMessage;import com.intellectdesign.canvas.alert.handler.IRecipient;import com.intellectdesign.canvas.alert.handler.Message;import com.intellectdesign.canvas.alert.mail.MailDataValue;import com.intellectdesign.canvas.alert.mail.TxnMailExt;import com.intellectdesign.canvas.alert.sms.SMSPostingManager;import com.intellectdesign.canvas.database.DatabaseException;import com.intellectdesign.canvas.event.Event;import com.intellectdesign.canvas.logger.Logger;import com.intellectdesign.canvas.properties.reader.CTProperties;import com.intellectdesign.canvas.properties.reader.PropertyReader;/** * This class is responsible for sending email alerts to subscribed users. *  * @version 1.0 */public class SmtpChannelHandler extends GenericChannelHandler{	/**	 * This method fetches the details of list of User Nos to send mails using the {@link AlertMailHelper} 	 * 	 * @param listUserIDs - ArrayList object that contains the list of User Ids	 * @return listRecipients - ArrayList object that contains the User Nos and the Mail IDs 	 * @throws AlertHandlerException	 */	public ArrayList getRecipientsInfoFromDB(ArrayList listUserIDs) throws AlertHandlerException	{		ArrayList listRecipients = null;		logger.ctinfo("CTALT00472");		logger.ctdebug("CTALT00471", listUserIDs);		AlertMailHelper alertMailHelper = new AlertMailHelper();		try		{			// Go to the DB and fetch the Recipient details			listRecipients = (ArrayList) alertMailHelper.getRecipientsDetail(listUserIDs);		} catch (DatabaseException dbEx)		{			logger.cterror("CTALT00461", dbEx, listUserIDs);			throw new AlertHandlerException(AlertConstants.ERR_ALERT_DB_EX,					prptReader.retrieveProperty(AlertConstants.ERR_ALERT_DB_EX));		}		// If the array list of recipients is null, throw exception		if (listRecipients == null || listRecipients.isEmpty())		{			logger.cterror("CTALT00470");			throw new AlertHandlerException(AlertConstants.ERR_RECIPIENTS_NULL,					prptReader.retrieveProperty(AlertConstants.ERR_RECIPIENTS_NULL));		}		logger.ctdebug("CTALT00471", listRecipients);		logger.ctinfo("CTALT00472");		return listRecipients;	}	/**	 * This is the actual implmentation to send Alert Mails to a single receipient .	 * 	 * @param msg - Message object that contains the message data	 * @param recipient - Receipient object that contains the receipient details	 * @param sSender - String value of the Sender Mail id	 * @param sAlertId - String value of the Alert Id	 *  	 * @throws AlertHandlerException	 */	protected void send(IMessage msg, IRecipient recipient, String sSender, String sAlertId)			throws AlertHandlerException	{		Message message = (Message) msg;		SmtpMessageRecipient smtpMessageRecipient = null;		MailDataValue mailValObj = null;		TxnMailExt mailext = new TxnMailExt();		logger.ctinfo("CTALT00473");		try		{			if (recipient != null)			{				smtpMessageRecipient = (SmtpMessageRecipient) recipient;			} else			{				// If the recipient is null, Then the message has to be sent to all users				smtpMessageRecipient = new SmtpMessageRecipient();				smtpMessageRecipient.setUserId(AlertConstants.ALL_USERS);			}			mailValObj = formMailValues(message, smtpMessageRecipient, sSender);			// Go to the db and insert Message details in OD_PENDING_MAIL			mailext.storeMail(mailValObj);		} catch (Exception dbEx)		{			logger.cterror("CTALT00474", dbEx);			throw new AlertHandlerException(AlertConstants.ERR_ALERT_DB_EX,					prptReader.retrieveProperty(AlertConstants.ERR_ALERT_DB_EX));		}		logger.ctdebug("CTALT00475");		logger.ctdebug("CTALT00476");		logger.ctinfo("CTALT00477");	}	/**	 * This method prepares the MailDataValue object for alert message and receipiend details passed	 * 	 * @param message - Message object that contains the Short and Detailed Message	 * @param SmtpMessageRecipient - Recipient object that contains the User No, GCIF, and the Email Id	 * @param sender - String value of the From Mail Id	 * @return mailValObj - MailDataobject that contains the From, To, Subject and Body content	 */	private MailDataValue formMailValues(Message message, SmtpMessageRecipient smtpMessageRecipient, String sender)	{		logger.ctinfo("CTALT00478");		MailDataValue mailValObj = new MailDataValue();		String detailedMsg = message.getDetailedMessage();		message.setChannelName("SMTP");		message.formatMessage(message.getDetailedMessage(), CTProperties.getProperty("MAIL_LANG_DEFAULT"));		mailValObj.settoID(smtpMessageRecipient.getEmailId());		mailValObj.setsubject(message.getShortMessage());		mailValObj.setbody(message.getDetailedMessage());		sender = CTProperties.getProperty("MAIL_FROM_DEFAULT");		mailValObj.setfromId(sender);		mailValObj.setreplyTo("");		mailValObj.setpath("");		mailValObj.setCC("");		mailValObj.setbulk("N");		mailValObj.setBCC("");		message.setDetailedMessage(detailedMsg);		logger.ctinfo("CTALT00479");		return mailValObj;	}	/**	 * This is the actual implementation of SmtpChannelHandler to send mails to multiple Recipients 	 * 	 * @param msg - Message object that contains the short and detailed message	 * @param listRecipients -  ArrayList object that contains the list of Recipient User Nos	 * @param sSender - String value of the Sender E-Mail	 * @param sAlertId - String value of the Alert Id	 * 	 * @throws AlertHandlerException	 */	protected void send(IMessage msg, ArrayList listRecipients, String sSender, String sAlertId)			throws AlertHandlerException	{		Message message = (Message) msg;		logger.ctinfo("CTALT00963");		SmtpMessageRecipient smtpMessageRecipient = null;		MailDataValue mailValObj = null;		TxnMailExt mailext = new TxnMailExt();		try		{			ArrayList listUserIds = new ArrayList();			for (int i = 0; i < listRecipients.size(); i++)			{				smtpMessageRecipient = (SmtpMessageRecipient) listRecipients.get(i);				listUserIds.add(smtpMessageRecipient.getEmailId());				mailValObj = formMailValues(message, smtpMessageRecipient, sSender);				// Go to the db and insert Message details in OD_PENDING_MAIL				mailext.storeMail(mailValObj);			}			logger.ctdebug("CTALT00964", listUserIds);		} catch (Exception dbEx)		{			logger.cterror("CTALT00965", dbEx);			throw new AlertHandlerException(AlertConstants.ERR_ALERT_DB_EX,					prptReader.retrieveProperty(AlertConstants.ERR_ALERT_DB_EX));		}		logger.ctdebug("CTALT00966");		logger.ctdebug("CTALT00967");		logger.ctinfo("CTALT00968");	}	private static final Logger logger = Logger.getLogger(SmtpChannelHandler.class);	private PropertyReader prptReader = AlertConstants.ALERT_PROPERTIES;	/**	 * This message provides the implmentation to post the messages 	 * 	 * @param event - Event object that contains the event data	 * @param alertDetails - AlertDetail object that contains the alert data	 * @param DataMap - Hashmap of the alert message data to be posted	 * 	 */	public void postMessage(Event event, AlertDetail alertDetails, Map dataMap)	{		List data = new ArrayList();		data.add(dataMap);		SMSPostingManager smsManager = new SMSPostingManager();		smsManager.process(data);	}}