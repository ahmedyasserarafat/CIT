/** * Copyright 2014. Intellect Design Arena Limited. All rights reserved.  *  * These materials are confidential and proprietary to Intellect Design Arena  * Limited and no part of these materials should be reproduced, published, transmitted * or distributed in any form or by any means, electronic, mechanical, photocopying,  * recording or otherwise, or stored in any information storage or retrieval system  * of any nature nor should the materials be disclosed to third parties or used in any  * other manner for which this is not authorized, without the prior express written  * authorization of Intellect Design Arena Limited. *  */package com.intellectdesign.canvas.utils;import java.io.ByteArrayInputStream;import java.io.InputStream;import java.util.StringTokenizer;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import org.w3c.dom.Document;import org.w3c.dom.NamedNodeMap;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import com.intellectdesign.canvas.exceptions.common.BaseException;/** * This class contains a generic XML Parser that provides simple API's for reading contents from a XML *  * @version 1.0 */public class XMLParser{	private Document doc = null;	/**	 * Constructor that takes in an actual XML string	 * 	 * @param xml The string having the actual XML content	 * @throws BaseException thrown if any error occurs while loading / parsing the XML	 */	public XMLParser(String xml) throws BaseException	{		InputStream in = new ByteArrayInputStream(xml.getBytes());		loadFile(in);	}	/**	 * Constructor that takes in an Input Stream	 * 	 * @param in The InputStream	 * @throws BaseException thrown if any error occurs while loading / parsing the XML	 */	public XMLParser(InputStream in) throws BaseException	{		loadFile(in);	}	/**	 * Its the first method that would be called in the class. Normally called by Constructor This method loads the XML	 * file into a parser and parses the XML, it can take a long time.	 * 	 * @param in The stream from which the XML is to be loaded	 * @throws BaseException Thrown if any error occurs while loading / parsing the XML	 */	private void loadFile(InputStream in) throws BaseException	{		try		{			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();			dbf.setNamespaceAware(true);			try			{				DocumentBuilder db = dbf.newDocumentBuilder();				doc = db.parse(in);			} catch (Exception e)			{				throw new BaseException(e);			}		} finally		{			// Always close the stream			ResourceLoaderUtils.closeStream(in);		}	}	/**	 * This method takes parameter as the node path whose count is to be found and returns the count as an int eg:	 * getNodeCount("Request@ProviderSetupRequest@Extrinsic") gives the count of node 'Extrinsic' under node	 * 'ProviderSetRequest' under node 'Request' under the document root.	 * 	 * @param nodePath The node path	 * @return the node count	 */	public int getNodeCount(String nodePath)	{		if (nodePath == null)		{			return 0;		}		// Path is seperated by @		StringTokenizer strtok = new StringTokenizer(nodePath, "@");		Node node = doc.getDocumentElement();		NodeList nl;		nl = node.getChildNodes();		boolean present = false;		int nodeCount = 0;		int tokCount = strtok.countTokens();		for (int j = 0; j < tokCount - 1; j++)		{			String tok = strtok.nextToken();			present = false;			for (int i = 0; i < nl.getLength(); i++)			{				if (nl.item(i).getNodeName().equals(tok))				{					node = nl.item(i);					nl = node.getChildNodes();					present = true;					break;				}			}			if (!present)			{				break;			}		}		if ((!present) && tokCount > 1)		{			return 0;		}		// Get the last nodename from node path		String tok = strtok.nextToken();		for (int i = 0; i < nl.getLength(); i++)		{			if (nl.item(i).getNodeName().equals(tok))			{				nodeCount++;			}		}		return nodeCount;	}	/**	 * This method takes parameter as the node, a node path whose count is to be found and returns the count as an int	 * eg: getNodeCount(node, "Request@ProviderSetupRequest@Extrinsic") gives the count of node 'Extrinsic' under node	 * 'ProviderSetRequest' under node 'Request' under the Node node.	 * 	 * @param node The parent node	 * @return the node count	 */	public static int getNodeCount(Node node, String nodePath)	{		if (nodePath == null)		{			return 0;		}		StringTokenizer strtok = new StringTokenizer(nodePath, "@");		NodeList nl;		nl = node.getChildNodes();		boolean present = false;		int nodeCount = 0;		int tokCount = strtok.countTokens();		for (int j = 0; j < tokCount - 1; j++)		{			String tok = strtok.nextToken();			present = false;			for (int i = 0; i < nl.getLength(); i++)			{				if (nl.item(i).getNodeName().equals(tok))				{					node = nl.item(i);					nl = node.getChildNodes();					present = true;					break;				}			}			if (!present)			{				break;			}		}		if ((!present) && tokCount > 1)		{			return 0;		}		String tok = strtok.nextToken();		for (int i = 0; i < nl.getLength(); i++)		{			if (nl.item(i).getNodeName().equals(tok))			{				nodeCount++;			}		}		return nodeCount;	}	/**	 * returns the value found at the given path and index (starting at 0) eg:	 * getValueAtNode("Request@ProviderSetupRequest@Extrinsic", 2) gives the value at 3rd node 'Extrinsic' under node	 * 'ProviderSetRequest' under node 'Request' under the document root.	 * 	 * @param nodePath The path under the node at which the value is to be fetched	 * @param index The count of the child node at which the value is to be fetched	 * @return the value at node and NULL if path is incorrect	 */	public String getValueAtNode(String nodePath, int index)	{		String nodeValue = null;		if (nodePath == null)		{			return null;		}		StringTokenizer strtok = new StringTokenizer(nodePath, "@");		Node node = doc.getDocumentElement();		NodeList nl;		nl = node.getChildNodes();		boolean present = false;		int nodeCount = -1;		int tokCount = strtok.countTokens();		for (int j = 0; j < tokCount - 1; j++)		{			String tok = strtok.nextToken();			present = false;			for (int i = 0; i < nl.getLength(); i++)			{				if (nl.item(i).getNodeName().equals(tok))				{					node = nl.item(i);					nl = node.getChildNodes();					present = true;					break;				}			}			if (!present)			{				break;			}		}		if ((!present) && tokCount > 1)		{			return null;		}		present = false;		String tok = strtok.nextToken();		int i;		for (i = 0; i < nl.getLength(); i++)		{			node = nl.item(i);			if (node.getNodeName().equals(tok))			{				nodeCount++;				if (nodeCount == index)				{					present = true;					break;				}			}		}		if (present)		{			if (node.getFirstChild() == null)			{				nodeValue = "";			} else			{				nodeValue = node.getFirstChild().getNodeValue();			}		}		return nodeValue;	}	/**	 * This static method returns the value found at the given path in the given node eg: getValueAtNode(node,	 * "Request@ProviderSetupRequest@Extrinsic") gives the value at first node 'Extrinsic' under node	 * 'ProviderSetRequest' under node 'Request' under Node 'node' .	 * 	 * @param node The parent node	 * @param nodePath The path under the node at which the value is to be fetched	 * @return the value at node and NULL if path is incorrect	 */	public static String getValueAtNode(Node node, String nodePath)	{		return getValueAtNode(node, nodePath, 0);	}	/**	 * Purpose: This static method returns the value found at the given index at the given path in the given node eg:	 * getValueAtNode(node, "Request@ProviderSetupRequest@Extrinsic", 2) gives the value at 3rd node 'Extrinsic' under	 * node 'ProviderSetRequest' under node 'Request' under Node 'node' .	 * 	 * @param node The parent node	 * @param nodePath The path under the node at which the value is to be fetched	 * @param index The index / count at which the node is to be fetched	 * @return the value at node and NULL if path is incorrect	 */	public static String getValueAtNode(Node node, String nodePath, int index)	{		String nodeValue = null;		if (nodePath == null || node == null)		{			return null;		}		StringTokenizer strtok = new StringTokenizer(nodePath, "@");		NodeList nl;		nl = node.getChildNodes();		boolean present = false;		int nodeCount = -1;		int tokCount = strtok.countTokens();		for (int j = 0; j < tokCount - 1; j++)		{			String tok = strtok.nextToken();			present = false;			for (int i = 0; i < nl.getLength(); i++)			{				if (nl.item(i).getNodeName().equals(tok))				{					node = nl.item(i);					nl = node.getChildNodes();					present = true;					break;				}			}			if (!present)			{				break;			}		}		if ((!present) && tokCount > 1)		{			return null;		}		present = false;		String tok = strtok.nextToken();		int i;		for (i = 0; i < nl.getLength(); i++)		{			node = nl.item(i);			if (node.getNodeName().equals(tok))			{				nodeCount++;				if (nodeCount == index)				{					present = true;					break;				}			}		}		if (present)		{			if (node.getFirstChild() == null)			{				nodeValue = "";			} else			{				nodeValue = node.getFirstChild().getNodeValue();			}		}		return nodeValue;	}	/**	 * This method returns the Node found at the given path. eg: getNode("Request@ProviderSetupRequest@Extrinsic") gives	 * the first 'Extrinsic' node under node 'ProviderSetRequest' under node 'Request' under the document root.	 * 	 * @param nodePath The path at which the node is to be fetched	 * @return The node at given path, NULL if invalid path	 */	public Node getNode(String nodePath)	{		return getNode(nodePath, 0);	}	/**	 * This method returns the Node found at the given path and given index (starting at 0). eg: getNode(node,	 * "Request@ProviderSetupRequest@Extrinsic", 2) gives the 3rd 'Extrinsic' node under node 'ProviderSetRequest' under	 * node 'Request' under the Node node.	 * 	 * @param node The parent node	 * @param nodePath The path under the node at which the node is to be fetched	 * @param index The index / count at which the node is to be fetched	 * @return The node at given path, NULL if invalid path	 */	public static Node getNode(Node node, String nodePath, int index)	{		if (nodePath == null)		{			return null;		}		StringTokenizer strtok = new StringTokenizer(nodePath, "@");		NodeList nl;		nl = node.getChildNodes();		boolean present = false;		int nodeCount = -1;		int tokCount = strtok.countTokens();		for (int j = 0; j < tokCount - 1; j++)		{			String tok = strtok.nextToken();			present = false;			for (int i = 0; i < nl.getLength(); i++)			{				if (nl.item(i).getNodeName().equals(tok))				{					node = nl.item(i);					nl = node.getChildNodes();					present = true;					break;				}			}			if (!present)			{				break;			}		}		if ((!present) && tokCount > 1)		{			return null;		}		present = false;		String tok = strtok.nextToken();		int i;		for (i = 0; i < nl.getLength(); i++)		{			node = nl.item(i);			if (node.getNodeName().equals(tok))			{				nodeCount++;				if (nodeCount == index)				{					present = true;					break;				}			}		}		return present ? node : null;	}	/**	 * This method returns the Node found at the given path and given index (starting at 0). eg:	 * getNode("Request@ProviderSetupRequest@Extrinsic", 2) gives the 3rd 'Extrinsic' node under node	 * 'ProviderSetRequest' under node 'Request' under the document root.	 * 	 * @param nodePath The path under the node at which the node is to be fetched	 * @param index The index / count at which the node is to be fetched	 * @return The node at given path, NULL if invalid path	 */	public Node getNode(String nodePath, int index)	{		if (nodePath == null)		{			return null;		}		StringTokenizer strtok = new StringTokenizer(nodePath, "@");		Node node = doc.getDocumentElement();		NodeList nl;		nl = node.getChildNodes();		boolean present = false;		int nodeCount = -1;		int tokCount = strtok.countTokens();		for (int j = 0; j < tokCount - 1; j++)		{			String tok = strtok.nextToken();			present = false;			for (int i = 0; i < nl.getLength(); i++)			{				if (nl.item(i).getNodeName().equals(tok))				{					node = nl.item(i);					nl = node.getChildNodes();					present = true;					break;				}			}			if (!present)			{				break;			}		}		if ((!present) && tokCount > 1)		{			return null;		}		present = false;		String tok = strtok.nextToken();		int i;		for (i = 0; i < nl.getLength(); i++)		{			node = nl.item(i);			if (node.getNodeName().equals(tok))			{				nodeCount++;				if (nodeCount == index)				{					present = true;					break;				}			}		}		return present ? node : null;	}	/**	 * This method returns the value found at the given index at the given path eg:	 * getValueAtNode("Request@ProviderSetupRequest@Extrinsic") gives the value at node 'Extrinsic' under node	 * 'ProviderSetRequest' under node 'Request' under the document root.	 * 	 * @param nodePath The path under the node at which the value is to be fetched	 * @return the value at the node, NULL if not found	 */	public String getValueAtNode(String nodePath)	{		String nodeVale = null;		if (nodePath == null)		{			return null;		}		StringTokenizer strtok = new StringTokenizer(nodePath, "@");		Node node = doc.getDocumentElement();		NodeList nl;		nl = node.getChildNodes();		boolean present = false;		while (strtok.hasMoreElements())		{			String tok = strtok.nextToken();			present = false;			for (int i = 0; i < nl.getLength(); i++)			{				if (nl.item(i).getNodeName().equals(tok))				{					node = nl.item(i);					nl = node.getChildNodes();					present = true;					break;				}			}			if (!present)			{				break;			}		}		if (present)		{			if (node.getFirstChild() == null)			{				nodeVale = "";			} else			{				nodeVale = node.getFirstChild().getNodeValue();			}		}		return nodeVale;	}	/**	 * This method returns the attribute value of the given attribute name found at the given path eg:	 * getAttributeValueAtNode("Request@ProviderSetupRequest@Extrinsic", "User") gives the value of Attribute "User" at	 * node 'Extrinsic' under node 'ProviderSetRequest' under node 'Request' under the document root.	 * 	 * @param nodePath The path under the node at which the attribute is to be fetched	 * @param attName The name of the attribute to fetch	 * @return the attribute value, NULL if not found	 **/	public String getAttributeValueAtNode(String nodePath, String attName)	{		String attrValue = null;		if (nodePath == null)		{			return null;		}		StringTokenizer strtok = new StringTokenizer(nodePath, "@");		Node node = doc.getDocumentElement();		NodeList nl;		nl = node.getChildNodes();		boolean present = false;		while (strtok.hasMoreElements())		{			String tok = strtok.nextToken();			present = false;			for (int i = 0; i < nl.getLength(); i++)			{				if (nl.item(i).getNodeName().equals(tok))				{					node = nl.item(i);					nl = node.getChildNodes();					present = true;					break;				}			}			if (!present)			{				break;			}		}		if (present)		{			if (node.hasAttributes())			{				NamedNodeMap map = node.getAttributes();				node = map.getNamedItem(attName);				if (node != null)				{					return node.getNodeValue();				}			}		}		return attrValue;	}	/**	 * This static method returns the attribute value of the given attribute name found at the given path in the given	 * node eg: getAttributeValueAtNode("Request@ProviderSetupRequest@Extrinsic", "User") gives the value of Attribute	 * "User" at node 'Extrinsic' under node 'ProviderSetRequest' under node 'Request' under the Node 'node'	 * 	 * @param node The node at which attribute is to be fetched	 * @param nodePath The path under the node at which the attribute is to be fetched	 * @param attName The name of the attribute to fetch	 * @return the attribute value, NULL if not found	 */	public static String getAttributeValueAtNode(Node node, String nodePath, String attName)	{		String attrValue = null;		if (nodePath == null || node == null)		{			return null;		}		StringTokenizer strtok = new StringTokenizer(nodePath, "@");		NodeList nl;		nl = node.getChildNodes();		boolean present = false;		while (strtok.hasMoreElements())		{			String tok = strtok.nextToken();			present = false;			for (int i = 0; i < nl.getLength(); i++)			{				if (nl.item(i).getNodeName().equals(tok))				{					node = nl.item(i);					nl = node.getChildNodes();					present = true;					break;				}			}			if (!present)			{				break;			}		}		if (present)		{			if (node.hasAttributes())			{				NamedNodeMap map = node.getAttributes();				node = map.getNamedItem(attName);				if (node != null)				{					attrValue = node.getNodeValue();				}			}		}		return attrValue;	}	/**	 * This static method returns the attribute value found at the given node & attribute name eg:	 * getAttributeValueAtNode(node, "User") gives the value of Attribute "User" at given Node 'node'	 * 	 * @param node The node at which attribute is to be fetched	 * @param attName The name of the attribute to fetch	 * @return the attribute value, NULL if not found	 */	public static String getAttributeValueAtNode(Node node, String attName)	{		String attrValue = null;		if (node.hasAttributes())		{			NamedNodeMap map = node.getAttributes();			node = map.getNamedItem(attName);			if (node != null)			{				attrValue = node.getNodeValue();			}		}		return attrValue;	}	/**	 * This method returns the attribute value of the given attribute name found at the given path eg:	 * getAttributeValueAtDocumentRoot("User") gives the value of Attribute "User" at document root	 * 	 * @param attName The name of the attribute to fetch from the document root	 * @return The value of the attribute, NULL if none present	 */	public String getAttributeValueAtDocumentRoot(String attName)	{		String attrValue = null;		Node node = doc.getDocumentElement();		if (node.hasAttributes())		{			NamedNodeMap map = node.getAttributes();			node = map.getNamedItem(attName);			if (node != null)			{				attrValue = node.getNodeValue();			}		}		return attrValue;	}}