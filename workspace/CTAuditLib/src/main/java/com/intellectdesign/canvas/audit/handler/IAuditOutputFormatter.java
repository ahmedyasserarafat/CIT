/**
 * Copyright 2014. Intellect Design Arena Limited. All rights reserved. 
 * 
 * These materials are confidential and proprietary to Intellect Design Arena 
 * Limited and no part of these materials should be reproduced, published, transmitted
 * or distributed in any form or by any means, electronic, mechanical, photocopying, 
 * recording or otherwise, or stored in any information storage or retrieval system 
 * of any nature nor should the materials be disclosed to third parties or used in any 
 * other manner for which this is not authorized, without the prior express written 
 * authorization of Intellect Design Arena Limited.
 * 
 */

package com.intellectdesign.canvas.audit.handler;

import java.util.List;
import java.util.Map;

/**
 * This interface is to be implemented by classes that wish to customize the manner in which Audit content is formatted
 * before storage. The Audit Framework picks up the formatter based on the below logic from CTevent_properties.properties
 * file.
 * <ul>
 * <li>ALL_AUDIT_FORMATS - This is a comma separated listing of all the audit formats that is supported. For any
 * formats, an entry is to be registered here</li>
 * <li>{format}_AUDIT_FORMATTER_CLASS - This is the implementation of this interface that should be used for that format
 * </li>
 * <li>AUDIT_FORMAT - This is the format implementation that should be used for creating the audit text</li>
 * </ul>
 *  
 * @version 1.0
 */
public interface IAuditOutputFormatter
{
	/**
	 * This method is invoked by the audit framework with the list of Audit field metrics that is has prepared.
	 * 
	 * @param auditMetricsList The audit metrics for all the configured fields
	 * @param auditConfig The audit configuration identified for this audit event
	 * @param shouldAuditOldValues Flag indicating whether old values are being audited
	 * @return The String representation of the input
	 * @throws AuditHandlerException Thrown if any error occurs during formatting
	 */
	String format(List<AuditFieldMetrics> auditMetricsList, AuditDataValue auditConfig, boolean shouldAuditOldValues)
			throws AuditHandlerException;

	/**
	 * This method will be called to test whether this particular formatter can parse the audit content
	 * 
	 * @param auditContent The audit content previously generated
	 * @return true, if this formatter can parse the audit content
	 */
	boolean canParse(String auditContent);

	/**
	 * This method will parse the audit content generated by the format method and provide the output under 2 keys in
	 * the map -
	 * <ul>
	 * <li>NEW_VALUES - provides the new values</li>
	 * <li>OLD_VALUES - provides the old values</li>
	 * </ul>
	 * 
	 * @param content
	 * @param format
	 * @param mode
	 * @return map
	 * @throws AuditHandlerException
	 */
	Map<String, Object> parse(String content, ParseOutputFormat format, ParseOutputMode mode)
			throws AuditHandlerException;
}
