/**
 * Copyright 2014. Intellect Design Arena Limited. All rights reserved. 
 * 
 * These materials are confidential and proprietary to Intellect Design Arena 
 * Limited and no part of these materials should be reproduced, published, transmitted
 * or distributed in any form or by any means, electronic, mechanical, photocopying, 
 * recording or otherwise, or stored in any information storage or retrieval system 
 * of any nature nor should the materials be disclosed to third parties or used in any 
 * other manner for which this is not authorized, without the prior express written 
 * authorization of Intellect Design Arena Limited.
 */

package com.intellectdesign.canvas.servercomm.encryption;

import java.io.IOException;
import java.security.Key;

import javax.servlet.http.HttpServletResponse;

/**
 * Interface for implementing the key sharing functionalities , those who like the change the key sharing must implement
 * this interface and make the changes in the property file to get that affect the code flow
 * 
 * @version 1.0
 */
public interface PublicKeyInterface
{
	/**
	 * Interface for implementing the key sharing functionalities , those who like the change the key sharing must
	 * implement this interface and make the changes in the property file to get that affect the code flow
	 * 
	 * @return Object
	 */

	public Object generatePublicKey();

	/**
	 * Method to generate the public key instance and return it
	 * 
	 * @param key
	 * @param response
	 * @throws IOException
	 */

	public void printPublicKey(Object key, HttpServletResponse response) throws IOException;

	/**
	 * @key - publi key instance
	 * 
	 * @response- Servlets response object This method will expect the key object which is generated in the
	 *            generatePubliKey method and prints the output of the key structure in the response
	 */

	/**
	 * Method to decrypt the cipher text
	 * 
	 * @param cipherText
	 * @param key
	 */

	public String decrypt(byte[] cipherText, Object key);

	/**
	 * @cipherText - byte array of the encrypted content
	 * 
	 * @key-public key instance used to decrypt the cipher Text This method will accepts the key object generated by the
	 *             generatePublicKey method and the byte array of the cipher text and decrypts that into plain text
	 *             String with utf-8 encoding
	 */

	/**
	 * This method will returns the Public Key from the key object generated from the generatePublicKey method
	 * 
	 * @param keyObj
	 * @return Key
	 */

	public Key getPublicKey(Object keyObj);

	/**
	 * @keyObj - public key instance This method will returns the Public Key from the key object generated from the
	 *         generatePublicKey method
	 */

	/**
	 * This method will return the String representation of the PublicKey object
	 * 
	 * @param keyObj
	 * @return String
	 */

	public String getPublicKeyString(Object keyObj);

	/**
	 * @keyObj - public key instance This method will return the String representation of the PublicKey object
	 */

	/**
	 * This method will encrypt the data with the keyObject generated by the generatePublicKey method
	 * 
	 * @param data
	 * @param keyObj
	 */

	byte[] encrypt(String data, Object keyObj);
	/**
	 * @data - string value of the plain text to be encrypted
	 * 
	 * @keyObj - publi key instance This method will encrypt the data with the keyObject generated by the
	 *         generatePublicKey method
	 */
}
