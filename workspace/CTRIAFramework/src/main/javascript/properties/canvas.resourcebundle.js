/** * Copyright 2014. Intellect Design Arena Limited. All rights reserved.  *  * These materials are confidential and proprietary to Intellect Design Arena  * Limited and no part of these materials should be reproduced, published, transmitted * or distributed in any form or by any means, electronic, mechanical, photocopying,  * recording or otherwise, or stored in any information storage or retrieval system  * of any nature nor should the materials be disclosed to third parties or used in any  * other manner for which this is not authorized, without the prior express written  * authorization of Intellect Design Arena Limited. *  */cbx.namespace('canvas.resourcebundle');/** * canvas.resourcebundle * * Singleton class intended to store resource bundle objects. *  * The Class will be incharge of holding the labels of the user property files . The Developer has to register all the label entries with key and  * language with the JSON value *  * They can add the resourcebundle with the following keys with the following methods * 		1)  addBundle    - Adds the jsonvalue to that bundle key * 		2)  appendBundle - Appends the jsonvalue to that bundle key * 		3)  getBundle    - Get the Bundle for the particular key * 		4)  getBundleValue - Get the particular value from that Bundle for the particular key * which will be used to retrieve the particular value from the property file.   *  *  @version   1.0 */canvas.resourcebundle = function(){	var bundles=null;	return {      getInstance : function(){					 if(bundles === null){					    bundles = { 							   addBundle:function(bundleKey,language,jsonValue){							   		bundles[bundleKey+"_"+language] = jsonValue;								   },							   appendBundle:function(bundleKey,language,jsonValue,override){								   if(true == override){									   cbx.apply(bundles[bundleKey+"_"+language],jsonValue);								   }else{									   cbx.applyIf(bundles[bundleKey+"_"+language],jsonValue);								   }							   },
							   getBundle:function(bundleKey){								   	var key = bundleKey+"_"+iportal.preferences.getPrimaryLang();								   	var reOb =bundles[key]; 								   	if(!cbx.isEmpty(reOb)){								   		return reOb;								   	}else{ 								   		return {};								   	}							   },							   getBundleValue:function(bundleKey,label){								   	var key = bundleKey+"_"+iportal.preferences.getPrimaryLang();								   	var reOb =bundles[key]; 								   	if(!cbx.isEmpty(reOb)){								   		return reOb[label];								   	}else{ 								   		return {};								   	}							   },							   getFWBundle:function(){								   	var bundleKey = "canvas-default";								   	var key = bundleKey+"_"+iportal.preferences.getPrimaryLang();								   	var reOb =bundles[key]; 								   	if(!cbx.isEmpty(reOb)){								   		return reOb;								   	}else{ 								   		return {};								   	}							   },							   getFWBundleValue:function(label){								 	var bundleKey = "canvas-default";								   	var key = bundleKey+"_"+iportal.preferences.getPrimaryLang();								   	var reOb =bundles[key]; 								   	if(!cbx.isEmpty(reOb)){								   		return reOb[label];								   	}else{ 								   		return {};								   	}							   },getFWBundleKey:function(){								 	return "canvas-default";							   }					   };					 }					 return bundles;      				}		};}();
CRB = canvas.resourcebundle.getInstance();