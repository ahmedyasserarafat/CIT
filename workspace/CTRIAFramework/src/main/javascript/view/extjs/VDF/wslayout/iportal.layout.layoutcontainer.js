/** * Copyright 2014. Intellect Design Arena Limited. All rights reserved.  *  * These materials are confidential and proprietary to Intellect Design Arena  * Limited and no part of these materials should be reproduced, published, transmitted * or distributed in any form or by any means, electronic, mechanical, photocopying,  * recording or otherwise, or stored in any information storage or retrieval system  * of any nature nor should the materials be disclosed to third parties or used in any  * other manner for which this is not authorized, without the prior express written  * authorization of Intellect Design Arena Limited. *  * 		@version   0.1 *//*@class	iportal.layout.layoutcontainerThis class overrides the Panel component and provides a pre-formatted invisible container that will be responsible for loading all the the associated widgets inside. This container is also responsibleto load and organize its child widgets as per the layout mentioned in the meta data. For this organization, it will used the iportal.container.* wrappers for loading the widgets.  This container also provides a set of helper functions for managing the components inside it.*/Ext.ns("iportal.layout.layoutcontainer");iportal.layout.layoutcontainer = Ext.extend( Ext.Panel, {    border:false,	height:(this.wsLayout!=null && this.wsLayout=='STACK')?(iportal.jsutil.getContainerResizeHeight()+25):iportal.jsutil.getContainerResizeHeight(), 	//width:iportal.jsutil.getContainerResizeWidth(),	initialHeight:null,	//autoWidth:true,	autoScroll:true,	lytConf:null,	bodyStyle:'overflow-x:hidden',	initComponent:function() {		this.on("afterlayout", this.resetHeight, this);        iportal.layout.layoutcontainer.superclass.initComponent.apply(this);    } // eo function initComponent	,addItem: function(item){		this.doLayout();	},	resetHeight : function(){		var reqHeight=(this.wsLayout!=null && this.wsLayout=='STACK')?(iportal.jsutil.getContainerResizeHeight()+25):iportal.jsutil.getContainerResizeHeight();  		if(reqHeight!=this.height){			this.setHeight(reqHeight);		}	},	init: function(){		var layoutId=this.itemId.substring(0, this.itemId.indexOf("_LAYOUT_CONTAINER"));		var lytConf=iportal.workspace.metadata.getUpdatedLayoutDef(layoutId);		if(lytConf!=null){			this.lytConf= lytConf;					}	},afterRender : function(){	this.initialHeight= this.height;	if(this.ownerCt!=null)		this.ownerCt.doLayout();	this.setHeight(this.initialHeight);		iportal.layout.layoutcontainer.superclass.afterRender.apply(this, arguments);},removeWidgets: function(){	this.getComponent(0).removeChildren();},/*method to be used by the workspace or layoutContainer's parents to start loading the widgets*/renderWidgets:function(){	this.init();	if(this.initialHeight){		this.setHeight(this.initialHeight);	}	that=this;	var container;	/**	 * Calculating the total numbers of rows that will be used for accomodating all the child widgets with in the specified layout	 * and using that for calculating the correct height of the drag-drop container	 * */	/*var totalColumns=1;	if(this.lytConf.LAYOUT_LAYOUT!=null){		var layoutObj= new Ext.Container.LAYOUTS[this.lytConf.LAYOUT_LAYOUT.toLowerCase()];		if(layoutObj!=null && layoutObj.totalColumns!=null){			totalColumns=layoutObj.totalColumns;		}	}	var totalRows= Math.ceil(this.lytConf.CHILD_WIDGETS.length/totalColumns);	var containerHeight=(iportal.jsutil.getMultiWidgetResizeHeight()*totalRows)+(35*totalRows);	//	var containerHeight=(iportal.jsutil.getMultiWidgetResizeHeight()*this.lytConf.CHILD_WIDGETS.length/2)+(32*(this.lytConf.CHILD_WIDGETS.length/2))		containerHeight=containerHeight>ch?containerHeight:ch*/	var proportion=null;	if(this.lytConf.LAYOUT_PROPORTION!=null && this.lytConf.LAYOUT_PROPORTION!=""){		proportion= this.lytConf.LAYOUT_PROPORTION.split(",");	}	var conf={			containerHeight:this.initialHeight,			layout:"fit",			itemId:this.lytConf.LAYOUT_ID,			childWidgets:this.lytConf.CHILD_WIDGETS,			lytContainer:this,			containerLayout: this.lytConf.LAYOUT_LAYOUT.toLowerCase(),			commManager: cbx.CommManager,			appMVRegistry :  new canvas.core.communication.appMVRegistry(),			proportion:proportion, 			listeners:{						"statechange":function(){						this.lytContainer.doLayout();					}			}	};	/* code for deleting the container in case its not yet cleared*/	if(Ext.isEmpty(this.items)||this.items.length==0){		if(this.lytConf.LAYOUT_LAYOUT=="STACK"){			//container= new iportal.container.dd(conf);			container= new iportal.layout.stack(conf);			this.add(container);		}		else if(this.lytConf.LAYOUT_LAYOUT=="TWO-COLUMN"){			//container= new iportal.container.dd(conf);			container= new iportal.layout.twocolumn(conf);			this.add(container);		}		else if(this.lytConf.LAYOUT_LAYOUT=="THREE-COLUMN"){			//container= new iportal.container.dd(conf);			container= new iportal.layout.threecolumn(conf);			this.add(container);		}		this.doLayout();	}	else if(this.items.length>0){		var conf={				layout:"fit",				itemId:this.lytConf.LAYOUT_ID,				childWidgets:this.lytConf.CHILD_WIDGETS,				lytContainer:this,				containerLayout: this.lytConf.LAYOUT_LAYOUT.toLowerCase(),				listeners:{							"statechange":function(){							this.lytContainer.doLayout();						}				}		};				Ext.apply(this.items.itemAt(0), conf);				this.items.itemAt(0).createItems();		return;		try{			this.items.itemAt(0).destroy();			var that=this;			setTimeout(function(){that.renderWidgets();}, 50);					}catch(e){}					}	}}); // eo extend // register xtypeExt.reg('iportal-layoutcontainer', iportal.layout.layoutcontainer);  // eof