/** * Copyright 2014. Intellect Design Arena Limited. All rights reserved.  *  * These materials are confidential and proprietary to Intellect Design Arena  * Limited and no part of these materials should be reproduced, published, transmitted * or distributed in any form or by any means, electronic, mechanical, photocopying,  * recording or otherwise, or stored in any information storage or retrieval system  * of any nature nor should the materials be disclosed to third parties or used in any  * other manner for which this is not authorized, without the prior express written  * authorization of Intellect Design Arena Limited. *  */package com.intellectdesign.canvas.entitlement;import static com.intellectdesign.canvas.proxycaller.ProxyCaller.on;import com.intellectdesign.canvas.config.ConfigurationManager;import com.intellectdesign.canvas.config.ImplClassDescriptor;import com.intellectdesign.canvas.logger.Logger;/** * Class to check whether a user is entitled or not *  * @version 1.0 * @deprecated This class should no longer be used. Instead use EntitlementsHelper present within the same package. */public class EntlEngine{	/**	 * API intends to check whether a user is entitled for the combination of the parameters passed.	 * 	 * @param userNo : the user number of the user.	 * @param gcif : the gcif number of the user.	 * @param sProduct : the product code associated.	 * @param sSubProduct : the sub product code associated.	 * @param sFunction : the function code associated.	 * @return boolean : whether user is entitled or not.	 * @throws EntitlementEngineException for any exception caught.	 */	public boolean hasEntitlement(String userNo, String gcif, String sProduct, String sSubProduct, String sFunction)			throws EntitlementEngineException	{		LOGGER.ctinfo("CTENT00019", gcif, userNo, sProduct, sSubProduct, sFunction);		boolean hasEntitled = false;		/**		 * Step 1: Check given input Gcif and UserNo are NOT NULL and Not Empty.		 */		if (gcif == null || userNo == null || (gcif.trim().length() <= 0) || (userNo.trim().length() <= 0))		{			LOGGER.cterror("CTENT00020");			return hasEntitled;		}		if (sProduct == null || sSubProduct == null || sFunction == null || (sProduct.trim().length() <= 0)				|| (sSubProduct.trim().length() <= 0) || (sFunction.trim().length() <= 0))		{			LOGGER.cterror("CTENT00021");			return hasEntitled;		}		/**		 * Step 2: Get the Entitlement list (Productcode Vs Sub-ProductCode Vs FunctionCode) in the form of		 * List<ProductFunctionVO<List<FunctionVO>>> object.		 */		Class<?> clshandler = null;		ConfigurationManager configMgr = ConfigurationManager.getInstance();		ImplClassDescriptor implDescriptor = configMgr.getImplClassDescriptor();		String className = implDescriptor.getViewEntlClass();		clshandler = on(className).get();		DataEntitlements dataEntitlements = on(clshandler).create()				.call("getUserDataEntitlements", sProduct.trim(), sSubProduct.trim(), sFunction.trim(), gcif, userNo)				.get();		hasEntitled = dataEntitlements.isEntitled();		LOGGER.ctinfo("CTENT00022");		return hasEntitled;	}	/**	 * API intends to check whether a user is entitled for the combination of the parameters passed.	 * 	 * @param userNo : the user number of the user.	 * @param gcif : the gcif number of the user.	 * @param sProduct : the product code associated.	 * @param sSubProduct : the sub product code associated.	 * @param sFunction : the function code associated.	 * @return boolean : whether user is entitled or not.	 * @throws EntitlementEngineException for any exception caught.	 */	public boolean hasEntitlement(String userNo, String gcif, String sProduct, String sSubProduct, String sFunction,			String sUserRole) throws EntitlementEngineException	{		LOGGER.ctinfo("CTENT00019", gcif, userNo, sProduct, sSubProduct, sFunction);		boolean hasEntitled = false;		/**		 * Step 1: Check given input Gcif and UserNo are NOT NULL and Not Empty.		 */		if (gcif == null || userNo == null || (gcif.trim().length() <= 0) || (userNo.trim().length() <= 0))		{			LOGGER.cterror("CTENT00020");			return hasEntitled;		}		if (sProduct == null || sSubProduct == null || sFunction == null || (sProduct.trim().length() <= 0)				|| (sSubProduct.trim().length() <= 0) || (sFunction.trim().length() <= 0))		{			LOGGER.cterror("CTENT00021");			return hasEntitled;		}		if (sUserRole == null || sUserRole.trim().length() <= 0)		{			LOGGER.cterror("CTENT00023");			return hasEntitled;		}		/**		 * Step 2: Get the Entitlement list (Productcode Vs Sub-ProductCode Vs FunctionCode) in the form of		 * List<ProductFunctionVO<List<FunctionVO>>> object.		 */		Class<?> clshandler = null;		ConfigurationManager configMgr = ConfigurationManager.getInstance();		ImplClassDescriptor implDescriptor = configMgr.getImplClassDescriptor();		String className = implDescriptor.getViewEntlClass();		clshandler = on(className).get();		DataEntitlements dataEntitlements = on(clshandler)				.create()				.call("getUserDataEntitlements", sProduct.trim(), sSubProduct.trim(), sFunction.trim(), gcif, userNo,						"3", sUserRole).get();		hasEntitled = dataEntitlements.isEntitled();		LOGGER.ctinfo("CTENT00022");		return hasEntitled;	}	private static final Logger LOGGER = Logger.getLogger(EntlEngine.class);}