/** * Copyright 2014. Intellect Design Arena Limited. All rights reserved.  *  * These materials are confidential and proprietary to Intellect Design Arena  * Limited and no part of these materials should be reproduced, published, transmitted * or distributed in any form or by any means, electronic, mechanical, photocopying,  * recording or otherwise, or stored in any information storage or retrieval system  * of any nature nor should the materials be disclosed to third parties or used in any  * other manner for which this is not authorized, without the prior express written  * authorization of Intellect Design Arena Limited. *  */package com.intellectdesign.canvas.viewdefinition.instruction;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import com.intellectdesign.canvas.logger.Logger;import com.intellectdesign.canvas.tree.ITreeNode;import com.intellectdesign.canvas.viewdefinition.ViewDefinition;import com.intellectdesign.canvas.viewdefinition.ViewDefinitionConstants;import com.intellectdesign.canvas.viewdefinition.ViewDefinitionException;/** * This class is responsile to provide the data as tree structure for tree views *  * @version 1.0 */public abstract class TreeListInstruction extends ListViewsInstruction{	public abstract ArrayList<ITreeNode> getDataAsTreeStructure(ArrayList<HashMap<String, String>> treeList,			HashMap mapInputParams);	/**	 * This method is called from getViewData after the data has been fetched from the data source. 	 * This method can be used by the sub classes to further massage / enrich the result data 	 * before the same is sent to the client.	 * 	 * @param listViewData -  List object that contains the data fetched from the data source	 * @param viewDefinition -  ViewDefinition object containing the view details	 * @param mapInputParams  - Cached Hashmap of Input Parameters from the client	 * @return responseData - Hashmap of processed response data 	 * 	 * @exception ViewDefinitionException thrown if any error occurs while processing the response.	 */	protected HashMap processResponse(List listViewData, ViewDefinition viewDefinition, HashMap mapInputParams)			throws ViewDefinitionException	{		// The default implementation is to just return the data as it is.		HashMap responseData = new HashMap();		responseData.put(ViewDefinitionConstants.KEY_ALL_RECORDS,				getDataAsTreeStructure((ArrayList) listViewData, mapInputParams));		logger.ctdebug("CTVDF00309", responseData);		return responseData;	}	private Logger logger = Logger.getLogger(TreeListInstruction.class);}