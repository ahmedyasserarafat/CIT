/** * Copyright 2014. Intellect Design Arena Limited. All rights reserved.  *  * These materials are confidential and proprietary to Intellect Design Arena  * Limited and no part of these materials should be reproduced, published, transmitted * or distributed in any form or by any means, electronic, mechanical, photocopying,  * recording or otherwise, or stored in any information storage or retrieval system  * of any nature nor should the materials be disclosed to third parties or used in any  * other manner for which this is not authorized, without the prior express written  * authorization of Intellect Design Arena Limited. *  */package com.intellectdesign.canvas.cache.handler;import java.util.HashMap;import java.util.List;/** * This is the base class for all the CacheHandlers. *  * @version 1.0 */public abstract class CacheDataBuilder{	/**	 * Sub classes should implement this method to put the actual data fetch logic based on the passed session as well	 * as the configured parameters.	 * 	 * @param hashMap The parameters for the cache handler to initialize.	 */	protected abstract List initializeCache(HashMap hashMap);	/**	 * This method will be called before the Parameters property is set. This should be validated by the handler for the	 * validity of the content from basic functionality point of view.	 * 	 * @param params The parameters to be assigned to the handler	 * @return String the error message from validation. If no errors, then return null.	 */	protected abstract String validateParameters(HashMap params);	/**	 * This method is called by the cache in case it is a validating cache. The purpose is for the handler to identify	 * if the cache can be considered as up to date based on the last updated date time provided. The default	 * implementation is to return true to indicate that there is no impact. The actual cache handler implementation for	 * the validating cache is expected to override this method and provide a proper implementation.	 * 	 * @return true if the cache can be treated as up to date. False otherwise	 */	protected boolean isCacheUptoDate()	{		return true;	}	/**	 * This method is expected to return the state of the handler. This will be invoked by the Cache through the Cache	 * Proxy if it decides to use the handler as a use and throw object. This is useful in cases where the cache is a	 * validating cache and the handler has to maintain previous refresh state for deciding to validate the staleness of	 * the cache data at source.	 * 	 * @return HashMap containing the state information in the manner that the handler wishes to have.	 */	protected HashMap getHandlerState()	{		return mHandlerState;	}	/**	 * This method is expected to set the state of the handler in the local variable. This will be invoked by the Cache	 * through the Cache Proxy if it is being used as a use and throw object. It is expected that any validating cache	 * always sets the state after any cache data load so that the same can be monitored by the proxy.	 * 	 * @param state The current state of the handler	 */	protected void setHandlerState(HashMap state)	{		mHandlerState = state;	}	/**	 * Sets the parameters configured for this handler	 * 	 * @param params The parameters configured for this handler	 */	protected void setParameters(HashMap params)	{		mParameters = params;	}	/**	 * Gets the parameters configured for this handler	 * 	 * @return HashMap The parameters configured for this handler	 */	protected HashMap getParameters()	{		return mParameters;	}	/**	 * The parameters for the cache handler	 */	private HashMap mParameters;	/**	 * The handler state	 */	private HashMap mHandlerState;}