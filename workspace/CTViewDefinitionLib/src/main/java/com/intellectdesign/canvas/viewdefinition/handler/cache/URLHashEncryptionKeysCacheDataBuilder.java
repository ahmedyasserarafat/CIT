/** * Copyright 2014. Intellect Design Arena Limited. All rights reserved.  *  * These materials are confidential and proprietary to Intellect Design Arena  * Limited and no part of these materials should be reproduced, published, transmitted * or distributed in any form or by any means, electronic, mechanical, photocopying,  * recording or otherwise, or stored in any information storage or retrieval system  * of any nature nor should the materials be disclosed to third parties or used in any  * other manner for which this is not authorized, without the prior express written  * authorization of Intellect Design Arena Limited. *  */package com.intellectdesign.canvas.viewdefinition.handler.cache;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import com.intellectdesign.canvas.cache.handler.CacheDataBuilder;import com.intellectdesign.canvas.logger.Logger;/** * This class is for url hash encryption keys cache builder extends cache builder. *  * @version 1.0 */public class URLHashEncryptionKeysCacheDataBuilder extends CacheDataBuilder{	private Logger logger = Logger.getLogger(URLHashEncryptionKeysCacheDataBuilder.class);	/**	 * this is ref to HashMap Cachekey List	 * 	 * @param params	 * @return cached keylist	 * @see com.intellectdesign.canvas.cache.handler.CacheDataBuilder#initializeCache(java.util.HashMap)	 */	@Override	@SuppressWarnings(	{ "unchecked", "rawtypes" })	protected List initializeCache(HashMap params)	{		List<Map> cachedKeyList = new ArrayList<Map>();		String generatedPassword = null;		String passwordToHash = "CT_V1.0";		try		{			MessageDigest md = MessageDigest.getInstance("SHA-512");			byte[] bytes = md.digest(passwordToHash.getBytes());			StringBuilder sb = new StringBuilder();			for (int i = 0; i < bytes.length; i++)			{				sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));			}			generatedPassword = sb.toString();		} catch (NoSuchAlgorithmException e)		{			logger.ctdebug("CTVDF00808", e);		}		HashMap map = new HashMap();		map.put("PASSWORD", generatedPassword);		logger.ctinfo("CTVDF00807", map);		cachedKeyList.add(map);		return cachedKeyList;	}	/**	 * this is ref to no validParams	 * 	 * @param params	 * @return	 * @see com.intellectdesign.canvas.cache.handler.CacheDataBuilder#validateParameters(java.util.HashMap)	 */	@Override	protected String validateParameters(HashMap params)	{		return null;	}}