/** * Copyright 2014. Intellect Design Arena Limited. All rights reserved.  * These materials are confidential and proprietary to Intellect Design Arena  * Limited and no part of these materials should be reproduced, published, transmitted * or distributed in any form or by any means, electronic, mechanical, photocopying,  * recording or otherwise, or stored in any information storage or retrieval system  * of any nature nor should the materials be disclosed to third parties or used in any  * other manner for which this is not authorized, without the prior express written  * authorization of Intellect Design Arena Limited. **/package com.intellectdesign.canvas.validator.locale;/** * This class is for ArabicLocale holds all of the characters for ar_SA locale *  *  * The following code should be used to sort the character set if any new character is added to the character set *  * <pre> * public static void main(String args[]) * { * 	Arrays.sort(characters); * 	for (int i = 0; i &lt; characters.length; i++) * 	{ * 		if (characters[i] &lt;= 0x07A &amp;&amp; characters[i] &gt;= 0x021) * 			System.out.println(&quot;0x0&quot; + Integer.toHexString(characters[i]).toUpperCase() * 					+ &quot;, //The Equivalent Character is &quot; + characters[i]); * 		else * 			System.out.println(&quot;0x0&quot; + Integer.toHexString(characters[i]).toUpperCase() + &quot;,&quot;); * 	} * } *  * </pre> *  * @version 1.0 */public class ArabicLocale extends ValidCharacterSet{	/**	 * Internal constant for serialization purposes	 */	/***	 * character array containing the alpha characters for ar_SA locale	 */	public static final char[] alphaCharacters =	{ 0x0020,// ;SPACE;			0x0041, // ;LATIN CAPITAL LETTER A;Lu;0;L;;;;;N;;;;0061;			0x0042, // ;LATIN CAPITAL LETTER B;Lu;0;L;;;;;N;;;;0062;			0x0043, // ;LATIN CAPITAL LETTER C;Lu;0;L;;;;;N;;;;0063;			0x0044, // ;LATIN CAPITAL LETTER D;Lu;0;L;;;;;N;;;;0064;			0x0045, // ;LATIN CAPITAL LETTER E;Lu;0;L;;;;;N;;;;0065;			0x0046, // ;LATIN CAPITAL LETTER F;Lu;0;L;;;;;N;;;;0066;			0x0047, // ;LATIN CAPITAL LETTER G;Lu;0;L;;;;;N;;;;0067;			0x0048, // ;LATIN CAPITAL LETTER H;Lu;0;L;;;;;N;;;;0068;			0x0049, // ;LATIN CAPITAL LETTER I;Lu;0;L;;;;;N;;;;0069;			0x004A, // ;LATIN CAPITAL LETTER J;Lu;0;L;;;;;N;;;;006A;			0x004B, // ;LATIN CAPITAL LETTER K;Lu;0;L;;;;;N;;;;006B;			0x004C, // ;LATIN CAPITAL LETTER L;Lu;0;L;;;;;N;;;;006C;			0x004D, // ;LATIN CAPITAL LETTER M;Lu;0;L;;;;;N;;;;006D;			0x004E, // ;LATIN CAPITAL LETTER N;Lu;0;L;;;;;N;;;;006E;			0x004F, // ;LATIN CAPITAL LETTER O;Lu;0;L;;;;;N;;;;006F;			0x0050, // ;LATIN CAPITAL LETTER P;Lu;0;L;;;;;N;;;;0070;			0x0051, // ;LATIN CAPITAL LETTER Q;Lu;0;L;;;;;N;;;;0071;			0x0052, // ;LATIN CAPITAL LETTER R;Lu;0;L;;;;;N;;;;0072;			0x0053, // ;LATIN CAPITAL LETTER S;Lu;0;L;;;;;N;;;;0073;			0x0054, // ;LATIN CAPITAL LETTER T;Lu;0;L;;;;;N;;;;0074;			0x0055, // ;LATIN CAPITAL LETTER U;Lu;0;L;;;;;N;;;;0075;			0x0056, // ;LATIN CAPITAL LETTER V;Lu;0;L;;;;;N;;;;0076;			0x0057, // ;LATIN CAPITAL LETTER W;Lu;0;L;;;;;N;;;;0077;			0x0058, // ;LATIN CAPITAL LETTER X;Lu;0;L;;;;;N;;;;0078;			0x0059, // ;LATIN CAPITAL LETTER Y;Lu;0;L;;;;;N;;;;0079;			0x005A, // ;LATIN CAPITAL LETTER Z;Lu;0;L;;;;;N;;;;007A;			0x0061, // ;LATIN SMALL LETTER A;Ll;0;L;;;;;N;;;0041;;0041			0x0062, // ;LATIN SMALL LETTER B;Ll;0;L;;;;;N;;;0042;;0042			0x0063, // ;LATIN SMALL LETTER C;Ll;0;L;;;;;N;;;0043;;0043			0x0064, // ;LATIN SMALL LETTER D;Ll;0;L;;;;;N;;;0044;;0044			0x0065, // ;LATIN SMALL LETTER E;Ll;0;L;;;;;N;;;0045;;0045			0x0066, // ;LATIN SMALL LETTER F;Ll;0;L;;;;;N;;;0046;;0046			0x0067, // ;LATIN SMALL LETTER G;Ll;0;L;;;;;N;;;0047;;0047			0x0068, // ;LATIN SMALL LETTER H;Ll;0;L;;;;;N;;;0048;;0048			0x0069, // ;LATIN SMALL LETTER I;Ll;0;L;;;;;N;;;0049;;0049			0x006A, // ;LATIN SMALL LETTER J;Ll;0;L;;;;;N;;;004A;;004A			0x006B, // ;LATIN SMALL LETTER K;Ll;0;L;;;;;N;;;004B;;004B			0x006C, // ;LATIN SMALL LETTER L;Ll;0;L;;;;;N;;;004C;;004C			0x006D, // ;LATIN SMALL LETTER M;Ll;0;L;;;;;N;;;004D;;004D			0x006E, // ;LATIN SMALL LETTER N;Ll;0;L;;;;;N;;;004E;;004E			0x006F, // ;LATIN SMALL LETTER O;Ll;0;L;;;;;N;;;004F;;004F			0x0070, // ;LATIN SMALL LETTER P;Ll;0;L;;;;;N;;;0050;;0050			0x0071, // ;LATIN SMALL LETTER Q;Ll;0;L;;;;;N;;;0051;;0051			0x0072, // ;LATIN SMALL LETTER R;Ll;0;L;;;;;N;;;0052;;0052			0x0073, // ;LATIN SMALL LETTER S;Ll;0;L;;;;;N;;;0053;;0053			0x0074, // ;LATIN SMALL LETTER T;Ll;0;L;;;;;N;;;0054;;0054			0x0075, // ;LATIN SMALL LETTER U;Ll;0;L;;;;;N;;;0055;;0055			0x0076, // ;LATIN SMALL LETTER V;Ll;0;L;;;;;N;;;0056;;0056			0x0077, // ;LATIN SMALL LETTER W;Ll;0;L;;;;;N;;;0057;;0057			0x0078, // ;LATIN SMALL LETTER X;Ll;0;L;;;;;N;;;0058;;0058			0x0079, // ;LATIN SMALL LETTER Y;Ll;0;L;;;;;N;;;0059;;0059			0x007A, // ;LATIN SMALL LETTER Z;Ll;0;L;;;;;N;;;005A;;005A			0x0600,			0x0601,			0x0602,			0x0603,			0x0604,			0x0605,			0x0606,			0x0607,			0x0608,			0x0609,			0x060A,			0x060B,			0x060C,			0x060D,			0x060E,			0x060F,			0x0610,			0x0611,			0x0612,			0x0613,			0x0614,			0x0615,			0x0616,			0x0617,			0x0618,			0x0619,			0x061A,			0x061B,			0x061C,			0x061D,			0x061E,			0x061F,			0x0620,			0x0621,			0x0622,			0x0623,			0x0624,			0x0625,			0x0626,			0x0627,			0x0628,			0x0629,			0x062A,			0x062B,			0x062C,			0x062D,			0x062E,			0x062F,			0x0630,			0x0631,			0x0632,			0x0633,			0x0634,			0x0635,			0x0636,			0x0637,			0x0638,			0x0639,			0x063A,			0x063B,			0x063C,			0x063D,			0x063E,			0x063F,			0x0640,			0x0641,			0x0642,			0x0643,			0x0644,			0x0645,			0x0646,			0x0647,			0x0648,			0x0649,			0x064A,			0x064B,			0x064C,			0x064D,			0x064E,			0x064F,			0x0650,			0x0651,			0x0652,			0x0653,			0x0654,			0x0655,			0x0656,			0x0657,			0x0658,			0x0659,			0x065A,			0x065B,			0x065C,			0x065D,			0x065E,			0x065F,			0x066A,			0x066B,			0x066C,			0x066D,			0x066E,			0x066F,			0x0670,			0x0671,			0x0672,			0x0673,			0x0674,			0x0675,			0x0676,			0x0677,			0x0678,			0x0679,			0x067A,			0x067B,			0x067C,			0x067D,			0x067E,			0x067F,			0x0680,			0x0681,			0x0682,			0x0683,			0x0684,			0x0685,			0x0686,			0x0687,			0x0688,			0x0689,			0x068A,			0x068B,			0x068C,			0x068D,			0x068E,			0x068F,			0x0690,			0x0691,			0x0692,			0x0693,			0x0694,			0x0695,			0x0696,			0x0697,			0x0698,			0x0699,			0x069A,			0x069B,			0x069C,			0x069D,			0x069E,			0x069F,			0x06A0,			0x06A1,			0x06A2,			0x06A3,			0x06A4,			0x06A5,			0x06A6,			0x06A7,			0x06A8,			0x06A9,			0x06AA,			0x06AB,			0x06AC,			0x06AD,			0x06AE,			0x06AF,			0x06B0,			0x06B1,			0x06B2,			0x06B3,			0x06B4,			0x06B5,			0x06B6,			0x06B7,			0x06B8,			0x06B9,			0x06BA,			0x06BB,			0x06BC,			0x06BD,			0x06BE,			0x06BF,			0x06C0,			0x06C1,			0x06C2,			0x06C3,			0x06C4,			0x06C5,			0x06C6,			0x06C7,			0x06C8,			0x06C9,			0x06CA,			0x06CB,			0x06CC,			0x06CD,			0x06CE,			0x06CF,			0x06D0,			0x06D1,			0x06D2,			0x06D3,			0x06D4,			0x06D5,			0x06D6,			0x06D7,			0x06D8,			0x06D9,			0x06DA,			0x06DB,			0x06DC,			0x06DD,			0x06DE,			0x06DF,			0x06E0,			0x06E1,			0x06E2,			0x06E3,			0x06E4,			0x06E5,			0x06E6,			0x06E7,			0x06E8,			0x06E9,			0x06EA,			0x06EB,			0x06EC,			0x06ED,			0x06EE,			0x06EF,			0x06FA,			0x06FB,			0x06FC,			0x06FD,			0x06FE,			0x06FF };	// character array containing the numeric characters for ar_SA locale	public static final char[] numericCharacters =	{			0x030, // The Equivalent Character is 0			0x031, // The Equivalent Character is 1			0x032, // The Equivalent Character is 2			0x033, // The Equivalent Character is 3			0x034, // The Equivalent Character is 4			0x035, // The Equivalent Character is 5			0x036, // The Equivalent Character is 6			0x037, // The Equivalent Character is 7			0x038, // The Equivalent Character is 8			0x039, // The Equivalent Character is 9			0x0660, 0x0661, 0x0662, 0x0663, 0x0664, 0x0665, 0x0666, 0x0667, 0x0668, 0x0669, 0x06F0, 0x06F1, 0x06F2,			0x06F3, 0x06F4, 0x06F5, 0x06F6, 0x06F7, 0x06F8, 0x06F9	};	/**	 * character array containing the entire characters for ar_SA locale	 */	public static final char[] characters =	{			0x01,			0x02,			0x03,			0x04,			0x05,			0x06,			0x07,			0x08,			0x09,			0x0A,			0x0B,			0x0C,			0x0D,			0x0E,			0x0F,			0x010,			0x011,			0x012,			0x013,			0x014,			0x015,			0x016,			0x017,			0x018,			0x019,			0x01A,			0x01B,			0x01C,			0x01D,			0x01E,			0x01F,			0x020,			0x021, // The Equivalent Character is !			0x022, // The Equivalent Character is "			0x023, // The Equivalent Character is #			0x024, // The Equivalent Character is $			0x025, // The Equivalent Character is %			0x026, // The Equivalent Character is &			0x027, // The Equivalent Character is '			0x028, // The Equivalent Character is (			0x029, // The Equivalent Character is )			0x02A, // The Equivalent Character is *			0x02B, // The Equivalent Character is +			0x02C, // The Equivalent Character is ,			0x02D, // The Equivalent Character is -			0x02E, // The Equivalent Character is .			0x02F, // The Equivalent Character is /			0x030, // The Equivalent Character is 0			0x031, // The Equivalent Character is 1			0x032, // The Equivalent Character is 2			0x033, // The Equivalent Character is 3			0x034, // The Equivalent Character is 4			0x035, // The Equivalent Character is 5			0x036, // The Equivalent Character is 6			0x037, // The Equivalent Character is 7			0x038, // The Equivalent Character is 8			0x039, // The Equivalent Character is 9			0x03A, // The Equivalent Character is :			0x03B, // The Equivalent Character is ;			0x03C, // The Equivalent Character is <			0x03D, // The Equivalent Character is =			0x03E, // The Equivalent Character is >			0x03F, // The Equivalent Character is ?			0x040, // The Equivalent Character is @			0x041, // The Equivalent Character is A			0x042, // The Equivalent Character is B			0x043, // The Equivalent Character is C			0x044, // The Equivalent Character is D			0x045, // The Equivalent Character is E			0x046, // The Equivalent Character is F			0x047, // The Equivalent Character is G			0x048, // The Equivalent Character is H			0x049, // The Equivalent Character is I			0x04A, // The Equivalent Character is J			0x04B, // The Equivalent Character is K			0x04C, // The Equivalent Character is L			0x04D, // The Equivalent Character is M			0x04E, // The Equivalent Character is N			0x04F, // The Equivalent Character is O			0x050, // The Equivalent Character is P			0x051, // The Equivalent Character is Q			0x052, // The Equivalent Character is R			0x053, // The Equivalent Character is S			0x054, // The Equivalent Character is T			0x055, // The Equivalent Character is U			0x056, // The Equivalent Character is V			0x057, // The Equivalent Character is W			0x058, // The Equivalent Character is X			0x059, // The Equivalent Character is Y			0x05A, // The Equivalent Character is Z			0x05B, // The Equivalent Character is [			0x05C, // The Equivalent Character is \			0x05D, // The Equivalent Character is ]			0x05E, // The Equivalent Character is ^			0x05F, // The Equivalent Character is _			0x060, // The Equivalent Character is `			0x061, // The Equivalent Character is a			0x062, // The Equivalent Character is b			0x063, // The Equivalent Character is c			0x064, // The Equivalent Character is d			0x065, // The Equivalent Character is e			0x066, // The Equivalent Character is f			0x067, // The Equivalent Character is g			0x068, // The Equivalent Character is h			0x069, // The Equivalent Character is i			0x06A, // The Equivalent Character is j			0x06B, // The Equivalent Character is k			0x06C, // The Equivalent Character is l			0x06D, // The Equivalent Character is m			0x06E, // The Equivalent Character is n			0x06F, // The Equivalent Character is o			0x070, // The Equivalent Character is p			0x071, // The Equivalent Character is q			0x072, // The Equivalent Character is r			0x073, // The Equivalent Character is s			0x074, // The Equivalent Character is t			0x075, // The Equivalent Character is u			0x076, // The Equivalent Character is v			0x077, // The Equivalent Character is w			0x078, // The Equivalent Character is x			0x079, // The Equivalent Character is y			0x07A, // The Equivalent Character is z			0x0600, 0x0601, 0x0602, 0x0603, 0x0604, 0x0605, 0x0606, 0x0607, 0x0608, 0x0609, 0x060A, 0x060B, 0x060C,			0x060D, 0x060E, 0x060F, 0x0610, 0x0611, 0x0612, 0x0613, 0x0614, 0x0615, 0x0616, 0x0617, 0x0618, 0x0619,			0x061A, 0x061B, 0x061C, 0x061D, 0x061E, 0x061F, 0x0620, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626,			0x0627, 0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F, 0x0630, 0x0631, 0x0632, 0x0633,			0x0634, 0x0635, 0x0636, 0x0637, 0x0638, 0x0639, 0x063A, 0x063B, 0x063C, 0x063D, 0x063E, 0x063F, 0x0640,			0x0641, 0x0642, 0x0643, 0x0644, 0x0645, 0x0646, 0x0647, 0x0648, 0x0649, 0x064A, 0x064B, 0x064C, 0x064D,			0x064E, 0x064F, 0x0650, 0x0651, 0x0652, 0x0653, 0x0654, 0x0655, 0x0656, 0x0657, 0x0658, 0x0659, 0x065A,			0x065B, 0x065C, 0x065D, 0x065E, 0x065F, 0x0660, 0x0661, 0x0662, 0x0663, 0x0664, 0x0665, 0x0666, 0x0667,			0x0668, 0x0669, 0x066A, 0x066B, 0x066C, 0x066D, 0x066E, 0x066F, 0x0670, 0x0671, 0x0672, 0x0673, 0x0674,			0x0675, 0x0676, 0x0677, 0x0678, 0x0679, 0x067A, 0x067B, 0x067C, 0x067D, 0x067E, 0x067F, 0x0680, 0x0681,			0x0682, 0x0683, 0x0684, 0x0685, 0x0686, 0x0687, 0x0688, 0x0689, 0x068A, 0x068B, 0x068C, 0x068D, 0x068E,			0x068F, 0x0690, 0x0691, 0x0692, 0x0693, 0x0694, 0x0695, 0x0696, 0x0697, 0x0698, 0x0699, 0x069A, 0x069B,			0x069C, 0x069D, 0x069E, 0x069F, 0x06A0, 0x06A1, 0x06A2, 0x06A3, 0x06A4, 0x06A5, 0x06A6, 0x06A7, 0x06A8,			0x06A9, 0x06AA, 0x06AB, 0x06AC, 0x06AD, 0x06AE, 0x06AF, 0x06B0, 0x06B1, 0x06B2, 0x06B3, 0x06B4, 0x06B5,			0x06B6, 0x06B7, 0x06B8, 0x06B9, 0x06BA, 0x06BB, 0x06BC, 0x06BD, 0x06BE, 0x06BF, 0x06C0, 0x06C1, 0x06C2,			0x06C3, 0x06C4, 0x06C5, 0x06C6, 0x06C7, 0x06C8, 0x06C9, 0x06CA, 0x06CB, 0x06CC, 0x06CD, 0x06CE, 0x06CF,			0x06D0, 0x06D1, 0x06D2, 0x06D3, 0x06D4, 0x06D5, 0x06D6, 0x06D7, 0x06D8, 0x06D9, 0x06DA, 0x06DB, 0x06DC,			0x06DD, 0x06DE, 0x06DF, 0x06E0, 0x06E1, 0x06E2, 0x06E3, 0x06E4, 0x06E5, 0x06E6, 0x06E7, 0x06E8, 0x06E9,			0x06EA, 0x06EB, 0x06EC, 0x06ED, 0x06EE, 0x06EF, 0x06F0, 0x06F1, 0x06F2, 0x06F3, 0x06F4, 0x06F5, 0x06F6,			0x06F7, 0x06F8, 0x06F9, 0x06FA, 0x06FB, 0x06FC, 0x06FD, 0x06FE, 0x06FF	};	/**	 * Locale specific implementation which returns an array of valid ar_SA character set	 * 	 * @return Returns a character array with valid character set	 */	protected char[] alphaNumericCharSet()	{		return characters;	}	/**	 * Locale specific implementation which returns an array of valid ar_SA alpha character set	 * 	 * @return Returns a character array with valid alpha character set	 */	protected char[] alphaCharSet()	{		return alphaCharacters;	}	/**	 * Locale specific implementation which returns an array of valid ar_SA numeric character set	 * 	 * @return Returns a character array with valid numeric character set	 */	protected char[] numericCharSet()	{		return numericCharacters;	}}