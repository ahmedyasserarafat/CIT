/** * Copyright 2014. Intellect Design Arena Limited. All rights reserved.  *  * These materials are confidential and proprietary to Intellect Design Arena  * Limited and no part of these materials should be reproduced, published, transmitted * or distributed in any form or by any means, electronic, mechanical, photocopying,  * recording or otherwise, or stored in any information storage or retrieval system  * of any nature nor should the materials be disclosed to third parties or used in any  * other manner for which this is not authorized, without the prior express written  * authorization of Intellect Design Arena Limited. *  */package com.intellectdesign.canvas.viewdefinition.handler;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Vector;import javax.transaction.SystemException;import javax.transaction.UserTransaction;import com.intellectdesign.canvas.classicdb.DataManager;import com.intellectdesign.canvas.common.ExtReplyObject;import com.intellectdesign.canvas.common.ReplyObject;import com.intellectdesign.canvas.common.UserValue;import com.intellectdesign.canvas.constants.common.FrameworkConstants;import com.intellectdesign.canvas.constants.common.JSPIOConstants;import com.intellectdesign.canvas.constants.util.TIConstants;import com.intellectdesign.canvas.constants.util.TRConstants;import com.intellectdesign.canvas.database.CanvasDatabaseRequest;import com.intellectdesign.canvas.database.DatabaseConstants;import com.intellectdesign.canvas.database.DatabaseException;import com.intellectdesign.canvas.database.DatabaseRequest;import com.intellectdesign.canvas.database.DatabaseResult;import com.intellectdesign.canvas.database.PaginationModel;import com.intellectdesign.canvas.exceptions.common.OnlineException;import com.intellectdesign.canvas.exceptions.common.ProcessingErrorException;import com.intellectdesign.canvas.handler.SimpleRequestHandler;import com.intellectdesign.canvas.logger.Logger;import com.intellectdesign.canvas.logging.PerformanceTimer;import com.intellectdesign.canvas.properties.MessageManager;import com.intellectdesign.canvas.viewdefinition.ColumnDefinition;import com.intellectdesign.canvas.viewdefinition.ColumnFilter;import com.intellectdesign.canvas.viewdefinition.ViewDefinition;import com.intellectdesign.canvas.viewdefinition.ViewDefinitionConstants;import com.intellectdesign.canvas.viewdefinition.ViewDefinitionException;import com.intellectdesign.canvas.viewdefinition.ViewDefinitionPreferences;import com.intellectdesign.canvas.viewdefinition.ViewDefinitionWrapper;import com.intellectdesign.canvas.viewdefinition.ViewManager;/** * This class is for widget preference handler extends simple request handler *  * @version 1.0 */public class WidgetPreferenceHandler extends SimpleRequestHandler{	/**	 * this is ref to WidgetPreferenceHandler to ProcessRequest and SimpleRequestHandler	 * 	 * @Override	 * @param obj	 * @return	 * @throws OnlineException	 * @see com.intellectdesign.canvas.handler.SimpleRequestHandler#processRequest(java.lang.Object)	 */	public ReplyObject processRequest(Vector obj) throws ProcessingErrorException	{		ExtReplyObject reply = null;		if (obj instanceof Vector)		{			Vector inVector = (Vector) obj;			/**			 * The UserTransaction is removed from here and moved to only those actions that performs some modifications			 * in the db. Right now only SAVE_ACTION and RESET_DEFAULTS action are doing some modification in db.			 */			// Method call to perform all Summary widget functions			try			{				reply = processWidgetPreferences(inVector);			} catch (OnlineException ole)			{				logger.cterror("CTVDF00158", ole);			} catch (ProcessingErrorException ole)			{				logger.cterror("CTVDF00158", ole);			}		}		return reply;	}	/**	 * this is ref to processWidgetPreferences	 * 	 * @param inputVector	 * @return	 * @throws ProcessingErrorException	 * @throws OnlineException	 */	private ExtReplyObject processWidgetPreferences(Vector inputVector) throws ProcessingErrorException,			OnlineException	{		logger.ctdebug("CTVDF00159", inputVector);		ExtReplyObject replyObject = new ExtReplyObject();		Object obj = inputVector.get(inputVector.size() + TIConstants.REL_CACHEDMAP_INDEX_IN_VECTOR);		if (obj instanceof HashMap)		{			Map paramsMap = (HashMap) obj;			logger.ctdebug("CTVDF00160", paramsMap);			PaginationModel listViewPaginationModel = new PaginationModel(paramsMap);			logger.ctdebug("CTVDF00161", listViewPaginationModel);			UserTransaction userTxn = DataManager.getUserTransaction();			try			{				PerformanceTimer perfTimer = new PerformanceTimer();				String action = (String) paramsMap.get(JSPIOConstants.INPUT_ACTION);				perfTimer.startTimer("WidgetPreferenceHandler.processWidgetPreferences - " + action);				if (ViewDefinitionConstants.ACTION_PREF_SAVE.equals(action))				{					replyObject = saveWidgetPreferences(paramsMap, inputVector, userTxn);				} else if (ViewDefinitionConstants.ACTION_PREF_DELETE.equals(action))				{					replyObject = deleteWidgetPreferences(paramsMap, inputVector, userTxn);				} else				{					throw new ProcessingErrorException("In WidgetPreferenceHandler: Action not supported: action: "							+ action);				}				perfTimer.endTimer();			} catch (SecurityException seex)			{				logger.cterror("CTVDF00163", seex);				throw new ProcessingErrorException("SecurityException", "A SecurityException occured while processing",						seex);			} catch (IllegalStateException isex)			{				logger.cterror("CTVDF00164", isex);				throw new ProcessingErrorException("IllegalStateException",						"A IllegalStateException occured while processing", isex);			} catch (ProcessingErrorException pex)			{				try				{					userTxn.rollback();					logger.cterror("CTVDF00169", pex);					throw pex;				} catch (SystemException sex)				{					logger.cterror("CTVDF00170", sex);					throw new ProcessingErrorException("SystemException",							"A SystemException occured while tried to roll back", sex);				}			}		}		return replyObject;	}	/**	 * this is ref to saveViewDefinition Method containing logic to persist data on to database if user clicks the save	 * button on teh preference page	 * 	 * @param paramsMap	 * @param gcifNo	 * @param userNo	 * @return	 * @throws ProcessingErrorException	 */	private Map saveViewDefinition(Map paramsMap, String gcifNo, String userNo) throws ProcessingErrorException	{		logger.ctinfo("CTVDF00171");		String createdViewId = null;		Map replyMap = new HashMap();		try		{			Map formValues = (Map) paramsMap.get(FORM_VALUES);			logger.ctdebug("CTVDF00172", formValues);			String viewId = (String) paramsMap.get(ViewDefinitionConstants.FLD_VIEW_ID);			if (viewId == null || "".equals(viewId))			{				viewId = (String) paramsMap.get(ViewDefinitionConstants.FLD_SYSTEM_VIEW_ID);			}			ViewManager viewManager = new ViewManager();			// Copy the parent view defintion details to new view definition			ViewDefinition viewDefinition = viewManager.getViewDefinition(viewId);			if (viewDefinition instanceof ViewDefinitionWrapper)			{				viewDefinition = ((ViewDefinitionWrapper) viewDefinition).getClonedViewDefinition();			} else			{				viewDefinition = (ViewDefinition) viewDefinition.clone();			}			if (viewDefinition != null)			{				createdViewId = viewDefinition.getViewId();				logger.ctdebug("CTVDF00173", viewDefinition);				boolean isOverriddenView = viewDefinition.isOverriddenView();				if (!isOverriddenView)				{					// Updating the new values to create					logger.ctdebug("CTVDF00174");					String viewDisplayName = (String) paramsMap.get(ViewDefinitionConstants.FLD_VIEW_NAME);					viewDefinition.setViewId(null);					viewDefinition.setViewName(viewDisplayName);					viewDefinition.setUserNumber(userNo);					viewDefinition.setGCIF(gcifNo);					viewDefinition.setParentViewId(viewId);					viewDefinition.setSystemViewID(viewId);					viewDefinition.setOverriddenView(true);				}				// Updating the column changes				updateColumns(formValues, viewDefinition);				updateAdditionalPref(paramsMap, viewDefinition);				// Updating the default view indicator				viewDefinition.setDefaultView(getDefaultViewIndicator(paramsMap));				if (viewDefinition.getViewId() == null)				{					logger.ctdebug("CTVDF00175", viewDefinition);					if (viewManager.isViewNameUnique(userNo, gcifNo, viewDefinition.getViewName(),							viewDefinition.getProduct(), viewDefinition.getSubProduct(),							viewDefinition.getSystemViewID()))					{						createdViewId = viewManager.createView(viewDefinition);						replyMap.put("SAVE_VIEW_FLAG", "SUCCESS");						replyMap.put("VIEW_ID", createdViewId);						replyMap.put("SUBMIT_SUCCESS", "Y");						replyMap.put("success", "true");					} else					{						logger.ctdebug("CTVDF00176");						HashMap<String, String> errorReplyMap = new HashMap<String, String>();						replyMap.put(FrameworkConstants.KEY_ERROR_CODE, ViewDefinitionConstants.VIEW_NAME_NOT_UNIQUE);						String errorMessage = MessageManager.getMessage(viewDefinition.getProduct().toLowerCase(),								ViewDefinitionConstants.VIEW_NAME_NOT_UNIQUE);						errorReplyMap.put(FrameworkConstants.KEY_ERROR_MESSAGE, errorMessage);					}				} else				{					UserValue userValue = new UserValue();					userValue.setPrimaryGcif(gcifNo);					userValue.setUserNo(userNo);					logger.ctdebug("CTVDF00177", viewDefinition);					viewManager.updateView(viewDefinition, false, userValue);					replyMap.put("UPDATE_VIEW_FLAG", "SUCCESS");					replyMap.put("SUBMIT_SUCCESS", "Y");					replyMap.put("success", "true");					replyMap.put("VIEW_ID", viewDefinition.getViewId());				}				replyMap.put("DEFAULT_VIEW", (viewDefinition.isDefaultView() ? "Y" : "N"));				replyMap.put("OD_USER_NO", viewDefinition.getUserNumber());				replyMap.put("OD_GCIF", viewDefinition.getGCIF());				replyMap.put("VIEW_DISPLAY_NM", viewDefinition.getViewName());				replyMap.put("WIDGET_ID", paramsMap.get("WIDGET_ID"));			}		} catch (ViewDefinitionException vdf)		{			logger.cterror("CTVDF00178", vdf);			replyMap.put("SAVE_VIEW_FLAG", "FAILURE");			replyMap.put("SUBMIT_SUCCESS", "false");			throw new ProcessingErrorException(vdf);		} catch (CloneNotSupportedException cnf)		{			logger.cterror("CTVDF00178", cnf);			replyMap.put("SAVE_VIEW_FLAG", "FAILURE");			replyMap.put("SUBMIT_SUCCESS", "false");			throw new ProcessingErrorException(cnf);		}		logger.ctinfo("CTVDF00179");		return replyMap;	}	/**	 * this is ref to ExtReplyObject saveWidgetPreferences	 * 	 * @param paramsMap	 * @param inputVector	 * @param userTxn	 * @return	 * @throws ProcessingErrorException	 * @throws SecurityException	 * @throws IllegalStateException	 */	private ExtReplyObject saveWidgetPreferences(Map paramsMap, Vector inputVector, UserTransaction userTxn)			throws ProcessingErrorException, SecurityException, IllegalStateException	{		ExtReplyObject replyObject = null;		Map replyMap = new HashMap();		Map formValues = (Map) paramsMap.get(FORM_VALUES);		if (!isSimulationMode((HashMap) paramsMap))		{			String gcifNo = (String) inputVector.get(TIConstants.GCIF_INDEX_IN_VECTOR);			String userNo = (String) inputVector.get(TIConstants.USER_NO_INDEX_IN_VECTOR);			replyMap = saveViewDefinition(paramsMap, gcifNo, userNo);		} else		{			Object obj = inputVector.get(inputVector.size() + TIConstants.REL_CACHEDMAP_INDEX_IN_VECTOR);			String sLocale = (String) ((HashMap) obj).get(ViewDefinitionConstants.INPUT_LANGUAGE_ID);			if (sLocale == null || "".equals(sLocale))				sLocale = "en_US";			String message_action = MessageManager.getMessage("cuser", "SUMRY_PREF_SAVE_SUC_MSG_SIMU_MODE", sLocale);			replyMap = getSimulationModeReplyObj(message_action).headerMap;			logger.ctdebug("CTVDF00180", ViewDefinitionConstants.ACTION_PREF_SAVE, replyMap);		}		logger.ctdebug("CTVDF00181", replyMap);		replyObject = new ExtReplyObject();		replyObject.headerMap = new HashMap(replyMap);		return replyObject;	}	/**	 * this is ref toExtReplyObject deleteWidgetPreferences	 * 	 * @param paramsMap	 * @param inputVector	 * @param userTxn	 * @return	 * @throws OnlineException	 * @throws SecurityException	 * @throws IllegalStateException	 */	private ExtReplyObject deleteWidgetPreferences(Map paramsMap, Vector inputVector, UserTransaction userTxn)			throws OnlineException, SecurityException, IllegalStateException	{		ExtReplyObject replyObject = null;		logger.ctdebug("CTVDF00182");		paramsMap = getAugmentedCachedHashMap(inputVector);		String action = (String) inputVector.get(TIConstants.INPUT_ACTION_INDEX_IN_VECTOR);		logger.ctdebug("CTVDF00183", paramsMap);		String gcifNo = (String) inputVector.get(TIConstants.GCIF_INDEX_IN_VECTOR);		String userNo = (String) inputVector.get(TIConstants.USER_NO_INDEX_IN_VECTOR);		String widgetId = (String) paramsMap.get(ViewDefinitionConstants.PARAM_WIDGET_ID);		String viewId = (String) paramsMap.get(ViewDefinitionConstants.FLD_VIEW_ID);		ViewManager viewManager = new ViewManager();		ViewDefinition viewDefinition = null;		UserValue userValue = new UserValue();		viewDefinition = viewManager.getViewDefinition(widgetId, viewId, (HashMap) paramsMap);		if (isUserDefinedView(viewDefinition.getViewId(), viewDefinition.getUserNumber(), viewDefinition.getGCIF()))		{			logger.ctdebug("CTVDF00184", viewDefinition.getViewDefinitionAsMap());			userValue.setPrimaryGcif(gcifNo);			userValue.setUserNo(userNo);			userTxn = DataManager.getUserTransaction();			// begin the transaction			if (userTxn != null)			{			}			/*			 * Deleting the View Definition			 */			viewManager.deleteViewDefinition(viewDefinition, userValue);			// commit the transaction			if (userTxn != null)			{			}			replyObject = new ExtReplyObject();			replyObject.headerMap = createPrefActionReplyMap(viewDefinition, viewId, action);			replyObject.headerMap.put("REMOVE_VIEW_FLAG", "SUCCESS");			replyObject.headerMap.put("SUBMIT_SUCCESS", "Y");			replyObject.headerMap.put("success", "true");			replyObject.headerMap.put("VIEW_ID", viewId);			replyObject.headerMap.put("WIDGET_ID", widgetId);			logger.ctdebug("CTVDF00185", ViewDefinitionConstants.ACTION_PREF_DELETE, replyObject.headerMap);		} else		{			replyObject = new ExtReplyObject();			replyObject.headerMap.put("SUBMIT_SUCCESS", "N");			replyObject.headerMap.put("success", "false");			logger.ctdebug("CTVDF00186", userNo);			throw new ViewDefinitionException(					"Could not delete the system defined view definition. This view is not created by the user. Hence it cannot be deleted",					"The user id is" + userNo);		}		logger.ctdebug("CTVDF00187");		return replyObject;	}	/**	 * this is ref to createPrefActionReplyMap	 * 	 * @param currViewDefn	 * @param viewid	 * @param inputaction	 * @return	 */	private HashMap<String, String> createPrefActionReplyMap(ViewDefinition currViewDefn, String viewid,			String inputaction)	{		HashMap<String, String> replyMap = new HashMap<String, String>();		String tools = currViewDefn.getAllTools();		String customizeInd = tools.contains(ViewDefinitionConstants.TOOLS_CUSTOMIZE) ? ViewDefinitionConstants.VAL_BOOL_YES				: ViewDefinitionConstants.VAL_BOOL_NO;		replyMap.put(ViewDefinitionConstants.PARAM_SUCCESS, ViewDefinitionConstants.VAL_BOOL_TRUE);		replyMap.put(ViewDefinitionConstants.PARAM_WIDGET_ID, currViewDefn.getWidgetId());		replyMap.put(ViewDefinitionConstants.FLD_VIEW_ID, viewid);		replyMap.put(ViewDefinitionConstants.FLD_CUSTOMIZE_IND, customizeInd);		replyMap.put(ViewDefinitionConstants.FLD_GCIF, currViewDefn.getGCIF());		replyMap.put(ViewDefinitionConstants.FLD_USER_NO, currViewDefn.getUserNumber());		replyMap.put(ViewDefinitionConstants.FLD_SYSTEM_VIEW_ID, currViewDefn.getSystemViewID());		replyMap.put(ViewDefinitionConstants.FLD_VIEW_NAME, currViewDefn.getViewName());		replyMap.put(ViewDefinitionConstants.FLD_DEFAULT, currViewDefn.getStrDefaultView());		replyMap.put(ViewDefinitionConstants.ACTION_PREF_ACTION, inputaction);		replyMap.put(ViewDefinitionConstants.PARAM_SOURCE, ViewDefinitionConstants.PREFERENCES);		replyMap.put(ViewDefinitionConstants.PARAM_RENDER_FLG, (inputaction				.equals(ViewDefinitionConstants.ACTION_PREF_DELETE)) ? ViewDefinitionConstants.VAL_BOOL_YES				: ViewDefinitionConstants.VAL_BOOL_NO);		return replyMap;	}	/**	 * this is ref to ViewDefupdatedColumns DB	 * 	 * @param formValues	 * @param viewDefinition	 */	private void updateColumns(Map formValues, ViewDefinition viewDefinition)	{		List columnList = null;		String sortField = null;		String sortDirection = null;		String sortPosition = null;		List colList = getColumnPropertiesList(formValues);		if (!colList.isEmpty())		{			Map sortInfo = getSortInfo(formValues);			if (!sortInfo.isEmpty())			{				sortField = String.valueOf(sortInfo.get(PARAM_FIELD));				sortDirection = String.valueOf(sortInfo.get(SORTING_DIRECTION));				sortPosition = String.valueOf(sortInfo.get(SORT_ORDER_POSTION));			}			List colFilterPropsList = getFilterPropertiesList(formValues);			columnList = new ArrayList();			for (Iterator colIter = colList.iterator(); colIter.hasNext();)			{				Map colProps = (Map) colIter.next();				if (colProps != null)				{					ColumnDefinition columnDefinition = viewDefinition.getColumnDefnForColumn(String.valueOf(colProps							.get(COLUMN_PROPS_DATA_INDEX)));					if (columnDefinition != null)					{						// Setting the customized column properties						columnDefinition.setViewId(viewDefinition.getViewId());						boolean isHidden = ViewDefinitionConstants.VAL_BOOL_YES.equals(String.valueOf(colProps								.get(COLUMN_PROPS_HIDDEN)));						columnDefinition.setVisible(!isHidden);						columnDefinition.setStrPosition(String.valueOf(colProps.get(COLUMN_PROPS_POSITION)));						if (sortField != null && sortDirection != null && sortPosition != null)						{							if (columnDefinition.getColumnId().equals(sortField))							{								columnDefinition.setSortOrder(sortDirection);								columnDefinition.setStrSortPosition(sortPosition);							}						}						updateColumnDefinitionFilterList(colFilterPropsList, columnDefinition);						logger.ctdebug("CTVDF00188", columnDefinition);						columnList.add(columnDefinition);					}				}			}		}		if (columnList != null)		{			viewDefinition.setListColumns((ArrayList) columnList);		}		logger.ctdebug("CTVDF00189", columnList);	}	/**	 * this is ref getColumnPropertiesList	 * 	 * @param formValues	 * @return	 */	private List getColumnPropertiesList(Map formValues)	{		List columnPropsList = new ArrayList();		if (formValues.get(FORM_VAL_COLUMN_PROPS) != null)		{			columnPropsList = (List) formValues.get(FORM_VAL_COLUMN_PROPS);		}		return columnPropsList;	}	/**	 * this is ref List getFilterPropertiesList	 * 	 * @param formValues	 * @return	 */	private List getFilterPropertiesList(Map formValues)	{		List colFilterPropsList = new ArrayList();		if (formValues.get(FORM_VAL_COLUMN_FILTERS) != null)		{			colFilterPropsList = (List) formValues.get(FORM_VAL_COLUMN_FILTERS);		}		return colFilterPropsList;	}	/**	 * this is ref GetSortInfo	 * 	 * @param formValues	 * @return	 */	private Map getSortInfo(Map formValues)	{		Map sortInfo = new HashMap();		if (formValues.get(FORM_VAL_SORT_INFO) != null)		{			sortInfo = (Map) formValues.get(FORM_VAL_SORT_INFO);		}		return sortInfo;	}	/**	 * this is ref getDefaultViewIndicator	 * 	 * @param paramsMap	 * @return	 */	private boolean getDefaultViewIndicator(Map paramsMap)	{		String defaultViewInd = null;		if (paramsMap.get(FORM_VAL_DEFAULT_VIEW_IND) != null)		{			defaultViewInd = (String) paramsMap.get(FORM_VAL_DEFAULT_VIEW_IND);		}		return "Y".equals(defaultViewInd);	}	/**	 * this ref to updateColumnDefinitionFilterList	 * 	 * @param colFilterPropsList	 * @param columnDefinition	 */	private void updateColumnDefinitionFilterList(List colFilterPropsList, ColumnDefinition columnDefinition)	{		ArrayList filterList = new ArrayList();		for (Iterator filterIter = colFilterPropsList.iterator(); filterIter.hasNext();)		{			Map colFilterProps = (Map) filterIter.next();			if (colFilterProps != null)			{				String filterColumn = String.valueOf(colFilterProps.get(FILTER_PROPS_FILTER_FIELD));				if (columnDefinition.getColumnId().equals(filterColumn))				{					String filterType = String.valueOf(colFilterProps.get(FILTER_PROPS_FILTER_TYPE));					ColumnFilter columnFilter = new ColumnFilter();					columnFilter.setFilterType(filterType);					columnFilter.setDataType(columnDefinition.getDataType());					columnFilter.setColumnID(filterColumn);					updateFilterValues(colFilterProps, columnFilter);					filterList.add(columnFilter);				}			}		}		columnDefinition.setListFilters(filterList);	}	private void updateFilterValues(Map colFilterProps, ColumnFilter columnFilter)	{		ArrayList filterValueList = new ArrayList();		if (colFilterProps.get(FILTER_PROPS_FILTER_VALUE) != null)		{			filterValueList.add(String.valueOf(colFilterProps.get(FILTER_PROPS_FILTER_VALUE)));		}		if (colFilterProps.get(FILTER_PROPS_FILTER_VALUE_DATE) != null)		{			filterValueList.add(String.valueOf(colFilterProps.get(FILTER_PROPS_FILTER_VALUE_DATE)));		}		if (colFilterProps.get(FILTER_PROPS_FILTER_VALUE_DATE2) != null)		{			filterValueList.add(String.valueOf(colFilterProps.get(FILTER_PROPS_FILTER_VALUE_DATE2)));		}		if (colFilterProps.get(FILTER_PROPS_FILTER_VALUE_TIME) != null)		{			filterValueList.add(String.valueOf(colFilterProps.get(FILTER_PROPS_FILTER_VALUE_TIME)));		}		if (colFilterProps.get(FILTER_PROPS_FILTER_VALUE_TIME2) != null)		{			filterValueList.add(String.valueOf(colFilterProps.get(FILTER_PROPS_FILTER_VALUE_TIME2)));		}		if (!filterValueList.isEmpty())		{			columnFilter.setFilterValues(filterValueList);		}	}	/**	 * method is ref to isUserDefinedView DBRequest	 * 	 * @param sViewID	 * @param sUserNo	 * @param sGcifID	 * @return	 * @throws ViewDefinitionException	 */	private boolean isUserDefinedView(String sViewID, String sUserNo, String sGcifID) throws ViewDefinitionException	{		DatabaseRequest dbRequest = null;		DatabaseResult dbResult = null;		boolean isUserDefinedView = false;		List listUserDetails = null;		HashMap hmUserDetails = null;		String sViewUserNo = null;		String sViewGcifID = null;		logger.ctinfo("CTVDF00190");		logger.ctinfo("CTVDF00191", sViewID, sUserNo, sGcifID);		PerformanceTimer performanceTimer = new PerformanceTimer();		performanceTimer.startTimer("ViewDefinitionInstruction.isUserDefinedView");		try		{			// Go to db and get the userno and GCIF for the given view			dbRequest = new CanvasDatabaseRequest();			dbRequest.setOperation(DatabaseConstants.SELECT);			dbRequest.setDataAccessMapKey(ViewDefinitionConstants.DB_DAM_KEY_VIEW_MANAGER);			dbRequest.setOperationExtension(ViewDefinitionConstants.DB_EXT_KEY_GET_USER_DETAILS_QRY);			dbRequest.addFilter(ViewDefinitionConstants.FLD_VIEW_ID, sViewID);			dbResult = dbRequest.execute();			listUserDetails = dbResult.getReturnedList();		} catch (DatabaseException dbExp)		{			logger.cterror("CTVDF00192", dbExp);			throw new ViewDefinitionException(dbExp);		}		if (listUserDetails != null && !listUserDetails.isEmpty())		{			hmUserDetails = (HashMap) listUserDetails.get(0);			sViewUserNo = (String) hmUserDetails.get(ViewDefinitionConstants.FLD_USER_NO);			sViewGcifID = (String) hmUserDetails.get(ViewDefinitionConstants.FLD_GCIF);		} else		{			logger.cterror("CTVDF00193");			throw new ViewDefinitionException("No such view exists in db", sViewID);		}		logger.ctdebug("CTVDF00194", sViewUserNo, sViewGcifID);		if (sUserNo.equals(sViewUserNo) && sGcifID.equals(sViewGcifID))		{			isUserDefinedView = true;		} else		{			isUserDefinedView = false;		}		performanceTimer.endTimer();		logger.ctinfo("CTVDF00195");		return isUserDefinedView;	}	/**	 * reg to method initScreen	 * 	 * @param inputVector	 * @return	 */	public ExtReplyObject initiateScreen(Vector inputVector)	{		return null;	}	/**	 * Setting the view definition addition details to the view definition.	 * 	 * @param paramsMap	 * @param viewDefinition	 */	private void updateAdditionalPref(Map paramsMap, ViewDefinition viewDefinition)	{		String refCurrency = null;		Map formValues = (Map) paramsMap.get(FORM_VALUES);		if (formValues.get(CURRENCY_VALUE_OPTION) != null)		{			Map ccyMap = (Map) formValues.get(CURRENCY_VALUE_OPTION);			refCurrency = (String) ccyMap.get(EQUIVALENT_CURRENCY_PROPS);			if (viewDefinition.getViewPreferences() == null)			{				viewDefinition.setViewPreferences(new ViewDefinitionPreferences());			}			viewDefinition.getViewPreferences().setViewId(viewDefinition.getViewId());			viewDefinition.getViewPreferences().setReferenceCcy(refCurrency);			viewDefinition.getViewPreferences().setReferenceCcyAvailableInd(ViewDefinitionConstants.VAL_BOOL_YES);			viewDefinition.getViewPreferences().setRateCardId((String) paramsMap.get(USER_PREFERED_RATECARD));			viewDefinition.getViewPreferences().setRateCardAvailableInd(ViewDefinitionConstants.VAL_BOOL_YES);		}	}	/**	 * refactored method to get the jspfields hashmap from vector either from the 26th index in the vector, if not get	 * from the last but one the position from the vector	 * 	 * @param inputVector	 * @return the hashpmap present in the vector	 */	private static HashMap getFieldsHashMapFromVector(Vector inputVector)	{		HashMap map = new HashMap();		Object cachedHashMapObj = inputVector.get(Integer.parseInt(HASH_MAP_POSITION) + 1);		if (cachedHashMapObj instanceof HashMap)			map = (HashMap) cachedHashMapObj;		else		{			cachedHashMapObj = inputVector.get(inputVector.size() + TIConstants.REL_CACHEDMAP_INDEX_IN_VECTOR);			if (cachedHashMapObj instanceof HashMap)				map = (HashMap) cachedHashMapObj;		}		return map;	}	/**	 * ref to Gets the cached HashMap from InputVector. Same as getJSPHashMap method except that other transaction	 * related data is also populated in the return HashMap.	 * 	 * @param Vector Contains TI framework defined fields in positions ranging from 0 to 28+	 * 	 * @param Map Cached HashMap with additional data from Vector	 * 	 * @retun map	 */	protected static Map getAugmentedCachedHashMap(Vector inputVector)	{		HashMap map = getFieldsHashMapFromVector(inputVector);		map.put(JSPIOConstants.INPUT_REFERENCE_NO, inputVector.get(TIConstants.REFERENCE_NO_POS));		map.put(TRConstants.VER_NO, inputVector.get(VER_NO_POS));		map.put(TIConstants.TXN_STATUS, inputVector.get(TXN_STATUS_POS));		map.put(TIConstants.CHANNEL_ID, inputVector.get(10));		return map;	}	private static int VER_NO_POS = 16;	private static int TXN_STATUS_POS = 15;	private static String HASH_MAP_POSITION = "26";	/**	 * This method retrieves the entitled accouts list. The list will contain a hashmap with the key as the Host account	 * ids and the value as the entitledaccountVOs	 * 	 * @return List	 */	private static final String FORM_VALUES = "FORM_VALUES";	public static final String USER_PREFERED_RATECARD = "RATECARD";	private static final String FORM_VAL_SORT_INFO = "_sortInfo";	private static final String CURRENCY_VALUE_OPTION = "_gvOpt";	private static final String EQUIVALENT_CURRENCY_PROPS = "eqvt_ccy";	private static final String FORM_VAL_INIT_COLLAPSED = "_initCollapsed";	private static final String FORM_VAL_DEFAULT_VIEW_IND = "DEFAULT_VIEW_IND";	private static final String PARAM_FIELD = "field";	private static final String SORTING_DIRECTION = "direction";	private static final String SORT_ORDER_POSTION = "position";	private static final String FORM_VAL_COLUMN_PROPS = "_colProperties";	private static final String FORM_VAL_COLUMN_FILTERS = "_colFilters";	private static final String COLUMN_PROPS_DATA_INDEX = "_dataindex";	private static final String COLUMN_PROPS_HIDDEN = "_hidden";	private static final String COLUMN_PROPS_POSITION = "_position";	private static final String FILTER_PROPS_FILTER_FIELD = "_field";	private static final String FILTER_PROPS_FILTER_TYPE = "_constraint";	private static final String FILTER_PROPS_FILTER_VALUE = "_value_txt";	private static final String FILTER_PROPS_FILTER_VALUE_DATE = "_value_date";	private static final String FILTER_PROPS_FILTER_VALUE_DATE2 = "_value_date2";	private static final String FILTER_PROPS_FILTER_VALUE_TIME = "_value_time";	private static final String FILTER_PROPS_FILTER_VALUE_TIME2 = "_value_time2";	// Instance of Logger for this class	private static Logger logger = Logger.getLogger(WidgetPreferenceHandler.class);}