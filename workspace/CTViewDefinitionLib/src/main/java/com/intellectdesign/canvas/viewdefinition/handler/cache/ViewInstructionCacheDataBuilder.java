/** * Copyright 2014. Intellect Design Arena Limited. All rights reserved.  *  * These materials are confidential and proprietary to Intellect Design Arena  * Limited and no part of these materials should be reproduced, published, transmitted * or distributed in any form or by any means, electronic, mechanical, photocopying,  * recording or otherwise, or stored in any information storage or retrieval system  * of any nature nor should the materials be disclosed to third parties or used in any  * other manner for which this is not authorized, without the prior express written  * authorization of Intellect Design Arena Limited. *  */package com.intellectdesign.canvas.viewdefinition.handler.cache;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import com.intellectdesign.canvas.cache.handler.CacheDataBuilder;import com.intellectdesign.canvas.database.CanvasDatabaseRequest;import com.intellectdesign.canvas.database.DatabaseConstants;import com.intellectdesign.canvas.database.DatabaseException;import com.intellectdesign.canvas.database.DatabaseRequest;import com.intellectdesign.canvas.database.DatabaseResult;import com.intellectdesign.canvas.logger.Logger;import com.intellectdesign.canvas.viewdefinition.ViewDefinitionConstants;/** * Handler class for View instruction Database cache which maintains all the available instruction class details *  * @version 1.0 */public class ViewInstructionCacheDataBuilder extends CacheDataBuilder{	/**	 * Initializes the cache with view instruction class details available for all view ids	 * 	 * @param session	 * @return List	 */	protected List initializeCache(HashMap params)	{		logger.ctinfo("CTVDF00240");		List returnList = null;		try		{			returnList = retrieveAllViewInstructions();		} catch (DatabaseException dbEx)		{			logger.cterror("CTVDF00241");			// Exception is caught and eaten up since this is only while refreshing cache		}		if (returnList != null && returnList.size() > 0)			returnList = formatViewInstructionDetails(returnList);		else			logger.ctdebug("CTVDF00242");		logger.ctinfo("CTVDF00243");		return returnList;	}	/**	 * Provide empty implementation since no validation is required	 * 	 * @return	 * @param session	 */	protected String validateParameters(HashMap params)	{		return null;	}	/**	 * Formats the List of view instructions so as to meet the requirement of the framework. Incoming list will be in	 * the Format [{VIEW_ID='VIEW_ID1',VIEW_INSTRCTION_CLASS='VIEW_INSTRUCTIN_CLASS1'},{VIEW_ID='VIEW_ID2',.....] This	 * List is formatted such that the output is in format	 * [{'VIEW_ID1'='VIEW_INSTRUCTION_CLASS1'},{'VIEW_ID2'='VIEW_INSTRUCTION_CLASS2'},...]as expected by the framework	 * 	 * @param inList incoming list	 * @return List of Instruction class names for all the view ids	 */	private List formatViewInstructionDetails(List inList)	{		logger.ctinfo("CTVDF00244");		HashMap hmInstructionMap = null;		String sViewId = null;		String sViewInstructionClass = null;		int inListSize = inList.size();		HashMap listFormattedMap = new HashMap();		for (int i = 0; i < inListSize; i++)		{			hmInstructionMap = (HashMap) inList.get(i);			sViewId = (String) hmInstructionMap.get(ViewDefinitionConstants.FLD_VIEW_ID);			sViewInstructionClass = (String) hmInstructionMap.get(ViewDefinitionConstants.INSTRUCTION_CLASS);			listFormattedMap.put(sViewId, sViewInstructionClass);		}		inList = new ArrayList();		if (listFormattedMap != null)		{			inList.add(listFormattedMap);		}		logger.ctdebug("CTVDF00245", inList);		logger.ctinfo("CTVDF00246");		return inList;	}	/**	 * Retrieves the entire set of instruction class present in the view definition table for all view ids in format	 * [{VIEW_ID='VIEW_ID1',VDF_INSTRCTION_CLASS='VDF_INSTRCTION_CLASS1'},{VIEW_ID='VIEW_ID2',.....]	 * 	 * @return Returns the List of instruction class for all the view ids	 * @exception DBexception	 */	public List retrieveAllViewInstructions() throws DatabaseException	{		DatabaseRequest dbRequest = null;		DatabaseResult dbResult = null;		List returnList = null;		logger.ctinfo("CTVDF00247");		try		{			dbRequest = new CanvasDatabaseRequest();			dbRequest.setDataAccessMapKey(ViewDefinitionConstants.DB_DAM_KEY_VIEW_MANAGER);			dbRequest.setOperation(DatabaseConstants.SELECT);			dbRequest.setOperationExtension(ViewDefinitionConstants.DB_EXT_KEY_GET_ALL_INSTRUCTION_CLASS_DTLS);			dbResult = dbRequest.execute();			returnList = dbResult.getReturnedList();		} catch (DatabaseException dbEx)		{			logger.cterror("CTVDF00250", dbEx);			throw dbEx;		}		logger.ctdebug("CTVDF00248", returnList);		logger.ctinfo("CTVDF00249");		return returnList;	}	private static Logger logger = Logger.getLogger(ViewInstructionCacheDataBuilder.class);}