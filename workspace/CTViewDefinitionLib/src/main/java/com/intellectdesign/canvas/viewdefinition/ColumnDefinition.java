/** * Copyright 2014. Intellect Design Arena Limited. All rights reserved.  *  * These materials are confidential and proprietary to Intellect Design Arena  * Limited and no part of these materials should be reproduced, published, transmitted * or distributed in any form or by any means, electronic, mechanical, photocopying,  * recording or otherwise, or stored in any information storage or retrieval system  * of any nature nor should the materials be disclosed to third parties or used in any  * other manner for which this is not authorized, without the prior express written  * authorization of Intellect Design Arena Limited. *  */package com.intellectdesign.canvas.viewdefinition;import java.io.Serializable;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;/** * This class is for column definition implements serializable and cloneable interfaces *  * @version 1.0 */public class ColumnDefinition implements Serializable, Cloneable{	/**	 * Internal constant generated for serialization purposes	 */	private static final long serialVersionUID = -4929184990196948394L;	/**	 * Returns the reference to the actual ColumnDefinition. This is used as part of the cloning sequence	 * 	 * @return	 */	public ColumnDefinition intern()	{		return this;	}	/**	 * ref to method hm ColDefMap COLUMNS: COLUMN_ID COLUMN_DISPLAY_NAME_KEY POSITION POSITION_FIXED_IND MANDATORY_IND	 * VISIBLE_IND SORT_POSITION SORT_ORDER SORTABLE_IND DATA_TYPE //View doesnt need this so dont put it in Hashmap:	 * filterRequired	 * 	 * @return cdf	 */	public HashMap getColumnDefinitionAsMap()	{		HashMap cdf = new HashMap();		cdf.put(ViewDefinitionConstants.FLD_COLUMN_ID, columnId);		cdf.put(ViewDefinitionConstants.FLD_COLUMN_DISPLAY_NAME_KEY, columnDisplayNameKey);		cdf.put(ViewDefinitionConstants.FLD_POSITION, strPosition);		cdf.put(ViewDefinitionConstants.FLD_POSITION_FIXED_IND, (positionFixed ? ViewDefinitionConstants.VAL_BOOL_YES				: ViewDefinitionConstants.VAL_BOOL_NO));		cdf.put(ViewDefinitionConstants.FLD_MANDATORY_IND, (mandatory ? ViewDefinitionConstants.VAL_BOOL_YES				: ViewDefinitionConstants.VAL_BOOL_NO));		cdf.put(ViewDefinitionConstants.FLD_VISIBLE_IND, (visible ? ViewDefinitionConstants.VAL_BOOL_YES				: ViewDefinitionConstants.VAL_BOOL_NO));		cdf.put(ViewDefinitionConstants.FLD_SORT_POSITION, strSortPosition);		cdf.put(ViewDefinitionConstants.FLD_SORT_ORDER, sortOrder);		cdf.put(ViewDefinitionConstants.FLD_SORTABLE_IND, strSortable);		cdf.put(ViewDefinitionConstants.FLD_DATA_TYPE, dataType);		cdf.put(ViewDefinitionConstants.FLD_HIDDEN_IND, strHidden);		// Add the grouping related information to the Map		cdf.put(ViewDefinitionConstants.FLD_GROUPABLE_IND, getStrGroupable());		cdf.put(ViewDefinitionConstants.FLD_RELATIVE_POS_IN_GROUP, getStrGroupRelativePosition());		cdf.put(ViewDefinitionConstants.FLD_MANDATORY_IN_GROUP_IND, getStrMandatoryInGroup());		cdf.put(ViewDefinitionConstants.FLD_GROUPED_IND, getStrGrouped());		cdf.put(ViewDefinitionConstants.FLD_POSITION_IN_GROUP, getGroupPosition());		cdf.put(ViewDefinitionConstants.FLD_DRILLDOWN_REQD_IND, getStrDrilldownRequired());		cdf.put(ViewDefinitionConstants.FLD_SEARCH_INDICATOR, getStrSearchAllowed());		cdf.put(ViewDefinitionConstants.FLD_SEARCH_ORDER, getSearchOrder());		cdf.put(ViewDefinitionConstants.FLD_SEARCH_DATA_TYPE, getSearchDataType());		cdf.put(ViewDefinitionConstants.FLD_CODE_VAL_VIEW_ID, getCodeValViewId());		cdf.put(ViewDefinitionConstants.FLD_CODE_VAL_CODE_COL, getCodeValCodeCol());		cdf.put(ViewDefinitionConstants.FLD_CODE_VAL_DISP_COL, getCodeValDisplayCol());		cdf.put(ViewDefinitionConstants.FLD_X_SERIES_IND, getXSeriesInd());		cdf.put(ViewDefinitionConstants.FLD_Y_SERIES_IND, getYSeriesInd());		cdf.put(ViewDefinitionConstants.FLD_DATA_SERIES_IND, getDataSeriedInd());		cdf.put(ViewDefinitionConstants.FLD_FILTER_HANDLER_ID, getFilterHandlerId());		cdf.put(ViewDefinitionConstants.FLD_FILTER_DATA_TYPE, getFilterDataType());		cdf.put(ViewDefinitionConstants.FLD_FILTER_ENABLE_IND, getFilterEnableInd());		cdf.put(ViewDefinitionConstants.FLD_LINKED_SOURCE_AMT, getLinkedSourceAmt());		cdf.put(ViewDefinitionConstants.FLD_LINKED_SOURCE_CCY, getLinkedSourceCcy());		cdf.put(ViewDefinitionConstants.FLD_LOOKUP_FILTER_EXTPARAMS, getLookupFilterExtParams());		cdf.put(ViewDefinitionConstants.FLD_DISABLED, getStrDisabled());		cdf.put(ViewDefinitionConstants.FLD_PARENT_COLUMN_ID, getParentColumnId());		cdf.put(ViewDefinitionConstants.FLD_SUMMARY_TYPE, getSummaryType());		cdf.put(ViewDefinitionConstants.FLD_PRIORITY, getPriority());		cdf.put(ViewDefinitionConstants.FLD_APPEND_CURRENCY_MODE, getCurrencyAppend());		cdf.put(ViewDefinitionConstants.FLD_LINKED_DATA_SERIES, getLinkedDataSeries());		cdf.put(ViewDefinitionConstants.FLD_CUSTOM_TOOLTEXT, getCustomTooltext());		cdf.put(ViewDefinitionConstants.FLD_CHANNEL_ID, channelId);		cdf.put(ViewDefinitionConstants.FLD_PRIMARY_IND, getPRIMARY_IND());		cdf.put(ViewDefinitionConstants.FLD_SECONDARY_IND, getSECONDARY_1());		cdf.put(ViewDefinitionConstants.TEMPLATE_ID, getTemplateId());		cdf.put(ViewDefinitionConstants.TEMPLATE_CONFIG, getTemplateConfig());		cdf.put(ViewDefinitionConstants.FLD_COLUMN_WIDTH, getColumnWidth());		return cdf;	}	/**	 * Override the base class implementation to return a proper clone of this object.	 * 	 * @exception CloneNotSupportedException	 * @see java.lang.Object#clone()	 */	public Object clone() throws CloneNotSupportedException	{		ColumnDefinition clonedColumn = (ColumnDefinition) super.clone();		// Ensure that column filters if any are also cloned properly.		ArrayList clonedFilters = null;		if (clonedColumn.getListFilters() != null)		{			clonedFilters = new ArrayList();			// Ensure that each filter in the list is also cloned.			Iterator<ColumnFilter> filterIterator = clonedColumn.getListFilters().iterator();			while (filterIterator.hasNext())				clonedFilters.add(filterIterator.next().clone());			// Set the cloned list back into this column Definition.			clonedColumn.setListFilters(clonedFilters);		}		return clonedColumn;	}	/**	 * ref to GetFilterEnableInd	 * 	 * @return filter Enabled	 */	public String getFilterEnableInd()	{		return filterEnableInd;	}	/**	 * This method returns the indicator for Filter	 * 	 * @param filterEnableInd	 */	public void setFilterEnableInd(String filterEnableInd)	{		this.filterEnableInd = filterEnableInd;	}	/**	 * ref the x series	 * 	 * @return the xSeriesInd	 */	public String getXSeriesInd()	{		return xSeriesInd;	}	/**	 * ref to x series IND	 * 	 * @param seriesInd the xSeriesInd to set	 */	public void setXSeriesInd(String seriesInd)	{		xSeriesInd = seriesInd;	}	/**	 * ref to Y Series	 * 	 * @return the ySeriesInd	 */	public String getYSeriesInd()	{		return ySeriesInd;	}	/**	 * ref to YseriesInd	 * 	 * @param seriesInd the ySeriesInd to set	 */	public void setYSeriesInd(String seriesInd)	{		ySeriesInd = seriesInd;	}	/**	 * ref to GetdataSeriesInd	 * 	 * @return the dataSeriedInd	 */	public String getDataSeriedInd()	{		return dataSeriedInd;	}	/**	 * ref to setDataSeriesInd	 * 	 * @param dataSeriedInd the dataSeriedInd to set	 */	public void setDataSeriedInd(String dataSeriedInd)	{		this.dataSeriedInd = dataSeriedInd;	}	/**	 * ref to GetFilterHandlerInd	 * 	 * @return filterHandlerInd	 */	public String getFilterHandlerId()	{		return filterHandlerId;	}	/**	 * ref to SetFilterHandlerInd	 * 	 * @param filterHandlerId	 */	public void setFilterHandlerId(String filterHandlerId)	{		this.filterHandlerId = filterHandlerId;	}	/**	 * ref to getFilterDataType	 * 	 * @return filter Datatype	 */	public String getFilterDataType()	{		return filterDataType;	}	/**	 * ref to set g]SetFilterDataType	 * 	 * @param filterDataType	 */	public void setFilterDataType(String filterDataType)	{		this.filterDataType = filterDataType;	}	/**	 * ref to StrSearchAallowed	 * 	 * @return the strSearchAllowed	 */	public boolean isSearchAllowed()	{		return ViewDefinitionConstants.VAL_BOOL_YES.equals(strSearchAllowed);	}	/**	 * ref to getStrSearchAllowed	 * 	 * @return the strSearchAllowed	 */	public String getStrSearchAllowed()	{		return strSearchAllowed;	}	/**	 * ref to SetStrSearchAllowed	 * 	 * @param strSearchAllowed the strSearchAllowed to set	 */	public void setStrSearchAllowed(String strSearchAllowed)	{		this.strSearchAllowed = strSearchAllowed;	}	/**	 * ref to getSearchOrder	 * 	 * @return the searchOrder	 */	public int getSearchOrder()	{		return searchOrder;	}	/**	 * ref to SetSearchOrder	 * 	 * @param searchOrder the searchOrder to set	 */	public void setSearchOrder(int searchOrder)	{		this.searchOrder = searchOrder;	}	/**	 * ref to getSearchDataType	 * 	 * @return the searchDataType	 */	public String getSearchDataType()	{		return searchDataType;	}	/**	 * ref to SetSearchDataType	 * 	 * @param searchDataType the searchDataType to set	 */	public void setSearchDataType(String searchDataType)	{		this.searchDataType = searchDataType;	}	/**	 * ref to getCodeValViewId	 * 	 * @return the codeValViewId	 */	public String getCodeValViewId()	{		return codeValViewId;	}	/**	 * refr to setCodeValViewId	 * 	 * @param codeValViewId the codeValViewId to set	 */	public void setCodeValViewId(String codeValViewId)	{		this.codeValViewId = codeValViewId;	}	/**	 * ref to getCodeValCodeCol	 * 	 * @return the codeValCodeCol	 */	public String getCodeValCodeCol()	{		return codeValCodeCol;	}	/**	 * ref to SetCodeValCodeCol	 * 	 * @param codeValCodeCol the codeValCodeCol to set	 */	public void setCodeValCodeCol(String codeValCodeCol)	{		this.codeValCodeCol = codeValCodeCol;	}	/**	 * ref to getCodeValDisplayCol	 * 	 * @return the codeValDisplayCol	 */	public String getCodeValDisplayCol()	{		return codeValDisplayCol;	}	/**	 * ref to Set CodeValDisplayCol	 * 	 * @param codeValDisplayCol the codeValDisplayCol to set	 */	public void setCodeValDisplayCol(String codeValDisplayCol)	{		this.codeValDisplayCol = codeValDisplayCol;	}	/**	 * ref to ViewID	 * 	 * @return id	 */	public String getViewId()	{		return viewId;	}	/**	 * to setViewId	 * 	 * @param viewId	 */	public void setViewId(String viewId)	{		this.viewId = viewId;	}	/**	 * ref to GetColId	 * 	 * @return colId	 */	public String getColumnId()	{		return columnId;	}	/**	 * ref to SetColId	 * 	 * @param columnId	 */	public void setColumnId(String columnId)	{		this.columnId = columnId;	}	/**	 * ref to getColumnDisplayNameKey	 * 	 * @return ColumnDisplayNameKey	 */	public String getColumnDisplayNameKey()	{		return columnDisplayNameKey;	}	/**	 * ref to setColumnDisplayNameKey	 * 	 * @param columnDisplayNameKey	 */	public void setColumnDisplayNameKey(String columnDisplayNameKey)	{		this.columnDisplayNameKey = columnDisplayNameKey;	}	/**	 * to position	 * 	 * @return position	 */	public int getPosition()	{		return position;	}	/**	 * ref to SetPosition	 * 	 * @param position	 */	public void setPosition(int position)	{		this.position = position;		if (position != ViewDefinitionConstants.NO_POSITION)		{			strPosition = String.valueOf(position);		} else		{			strPosition = null;		}	}	/**	 * ref to isPostionFixed	 * 	 * @return posFixed	 */	public boolean isPositionFixed()	{		return positionFixed;	}	/**	 * refto set Position	 * 	 * @param positionFixed	 */	public void setPositionFixed(boolean positionFixed)	{		this.positionFixed = positionFixed;		if (positionFixed)		{			strPositionFixed = ViewDefinitionConstants.VAL_BOOL_YES;		} else		{			strPositionFixed = ViewDefinitionConstants.VAL_BOOL_NO;		}	}	/**	 * to Mandatory	 * 	 * @return mandatory	 */	public boolean isMandatory()	{		return mandatory;	}	/**	 * to setMandatory	 * 	 * @param mandatory	 */	public void setMandatory(boolean mandatory)	{		this.mandatory = mandatory;		if (mandatory)		{			strMandatory = ViewDefinitionConstants.VAL_BOOL_YES;		} else		{			strMandatory = ViewDefinitionConstants.VAL_BOOL_NO;		}	}	/**	 * ref to isvisible	 * 	 * @return visible	 */	public boolean isVisible()	{		return visible;	}	/**	 * ref to Setvisible	 * 	 * @param visible	 */	public void setVisible(boolean visible)	{		this.visible = visible;		if (visible)		{			strVisible = ViewDefinitionConstants.VAL_BOOL_YES;		} else		{			strVisible = ViewDefinitionConstants.VAL_BOOL_NO;		}	}	/**	 * ref to sortRequired	 * 	 * @return sortRequired	 */	public boolean isSortRequired()	{		return sortRequired;	}	/**	 * ref to SetsortRequired	 * 	 * @param sortRequired	 */	public void setSortRequired(boolean sortRequired)	{		this.sortRequired = sortRequired;	}	/**	 * ref to Get SortPosition	 * 	 * @return SortPosition	 */	public int getSortPosition()	{		return sortPosition;	}	/**	 * ref to SetSortPosition	 * 	 * @param sortPosition	 */	public void setSortPosition(int sortPosition)	{		this.sortPosition = sortPosition;		if (sortPosition != ViewDefinitionConstants.MAX_VALUE)		{			strSortPosition = String.valueOf(sortPosition);		} else		{			strSortPosition = null;		}	}	/**	 * ref to GetSortOrder	 * 	 * @return sortOrder	 */	public String getSortOrder()	{		return sortOrder;	}	/**	 * ref to SetsortOrder	 * 	 * @param sortOrder	 */	public void setSortOrder(String sortOrder)	{		this.sortOrder = sortOrder;		if (sortOrder != null && !"".equals(sortOrder))			sortRequired = true;		else			sortRequired = false;	}	/**	 * ref to get DataType	 * 	 * @return data type	 */	public String getDataType()	{		return dataType;	}	/**	 * ref to SetDataType	 * 	 * @param dataType	 */	public void setDataType(String dataType)	{		this.dataType = dataType;	}	/**	 * ref to FilterReqd	 * 	 * @return FilterReqd	 */	public boolean isFilterRequired()	{		return filterRequired;	}	/**	 * ref to set FilterReqd	 * 	 * @param filterRequired	 */	public void setFilterRequired(boolean filterRequired)	{		this.filterRequired = filterRequired;	}	/**	 * ref to GetListFilters	 * 	 * @return list filters	 */	public ArrayList getListFilters()	{		return listFilters;	}	/**	 * ref to SetLIstfilters	 * 	 * @param listFilters	 */	public void setListFilters(ArrayList listFilters)	{		this.listFilters = listFilters;		if (listFilters != null && !listFilters.isEmpty())		{			filterRequired = true;		}	}	/**	 * ref to getStrPositionFixed	 * 	 * @return StrPositionFixed	 */	public String getStrPositionFixed()	{		return strPositionFixed;	}	/**	 * ref to Str CurrencyAppend	 * 	 * @return the strCurrencyAppend	 */	public String getCurrencyAppend()	{		return strCurrencyAppend;	}	/**	 * ref to setCurrencyAppen	 * 	 * @param strCurrencyAppend	 */	public void setCurrencyAppend(String strCurrencyAppend)	{		this.strCurrencyAppend = strCurrencyAppend;	}	/**	 * ref to SetStrPosiFixed	 * 	 * @param strPositionFixed	 */	public void setStrPositionFixed(String strPositionFixed)	{		this.strPositionFixed = strPositionFixed;		if (ViewDefinitionConstants.VAL_BOOL_YES.equals(strPositionFixed))			positionFixed = true;		else			positionFixed = false;	}	/**	 * to getMandatory	 * 	 * @return str Mandatory	 */	public String getStrMandatory()	{		return strMandatory;	}	/**	 * ref to SetManadatory	 * 	 * @param strMandatory	 */	public void setStrMandatory(String strMandatory)	{		this.strMandatory = strMandatory;		if (ViewDefinitionConstants.VAL_BOOL_YES.equals(strMandatory))			mandatory = true;		else			mandatory = false;	}	/**	 * ref to getStrVisible	 * 	 * @return getStrVisible	 */	public String getStrVisible()	{		return strVisible;	}	/**	 * ref to SetStrVisible	 * 	 * @param strVisible	 */	public void setStrVisible(String strVisible)	{		this.strVisible = strVisible;		if (ViewDefinitionConstants.VAL_BOOL_YES.equals(strVisible))			visible = true;		else			visible = false;	}	/**	 * ref to getStrSortPosition	 * 	 * @return getStrSortPosition	 */	public String getStrSortPosition()	{		return strSortPosition;	}	/**	 * ref to SetStrSortPosition	 * 	 * @param strSortPosition	 */	public void setStrSortPosition(String strSortPosition)	{		this.strSortPosition = strSortPosition;		if (strSortPosition != null && !"".equals(strSortPosition))		{			sortPosition = Integer.parseInt(strSortPosition);			if (sortOrder == null || "".equals(sortOrder))				setSortOrder(ViewDefinitionConstants.SQL_SORT_ORDER_ASCENDING);		}	}	/**	 * @return the primaryInd	 */	public String getPRIMARY_IND()	{		return PRIMARY_IND;	}	/**	 * @param primaryInd the primaryInd to set	 */	public void setPRIMARY_IND(String PRIMARY_IND)	{		this.PRIMARY_IND = PRIMARY_IND;	}	/**	 * @return the secondary1	 */	public String getSECONDARY_1()	{		return SECONDARY_1;	}	/**	 * @param secondary1 the secondary1 to set	 */	public void setSECONDARY_1(String SECONDARY_1)	{		this.SECONDARY_1 = SECONDARY_1;	}	/**	 * @return the secondary2	 */	public String getSECONDARY_2()	{		return SECONDARY_2;	}	/**	 * @param secondary2 the secondary2 to set	 */	public void setSECONDARY_2(String SECONDARY_2)	{		this.SECONDARY_2 = SECONDARY_2;	}	/**	 * ref to hidden	 * 	 * @return strhidden	 */	public String hidden()	{		return strPosition;	}	/**	 * ref to setStrPosition	 * 	 * @param strPosition	 */	public void setStrPosition(String strPosition)	{		this.strPosition = strPosition;		if (strPosition != null && !"".equals(strPosition))		{			position = Integer.parseInt(strPosition);		}	}	/**	 * ref to isidden	 * 	 * @return hidden	 */	public boolean isHidden()	{		return hidden;	}	/**	 * ref to SetstrHidden	 * 	 * @param hidden	 */	public void setHidden(boolean hidden)	{		this.hidden = hidden;		if (hidden)		{			strHidden = ViewDefinitionConstants.VAL_BOOL_YES;		} else		{			strHidden = ViewDefinitionConstants.VAL_BOOL_NO;		}	}	/**	 * ref to get strHidden	 * 	 * @return	 */	public String getStrHidden()	{		return strHidden;	}	/**	 * ref to strHidden	 * 	 * @param strHidden	 */	public void setStrHidden(String strHidden)	{		this.strHidden = strHidden;		if (ViewDefinitionConstants.VAL_BOOL_YES.equals(strHidden))			hidden = true;		else			hidden = false;	}	/**	 * ref to isSortable	 * 	 * @return	 */	public boolean isSortable()	{		return sortable;	}	/**	 * ref to setStrSortable	 * 	 * @param sortable	 */	public void setSortable(boolean sortable)	{		this.sortable = sortable;		if (sortable)		{			strSortable = ViewDefinitionConstants.VAL_BOOL_YES;		} else		{			strSortable = ViewDefinitionConstants.VAL_BOOL_NO;		}	}	/**	 * ref to getStrSortable	 * 	 * @return StrSortable	 */	public String getStrSortable()	{		return strSortable;	}	/**	 * ref to setStrSortable	 * 	 * @param strSortable	 */	public void setStrSortable(String strSortable)	{		this.strSortable = strSortable;		if (ViewDefinitionConstants.VAL_BOOL_YES.equals(strSortable))			sortable = true;		else			sortable = false;	}	/**	 * ref to isGroupable	 * 	 * @return the Groupable	 */	public boolean isGroupable()	{		return ViewDefinitionConstants.VAL_BOOL_YES.equals(getStrGroupable());	}	/**	 * ref to getStrGroupable	 * 	 * @return the Groupable	 */	public String getStrGroupable()	{		return strGroupable;	}	/**	 * ref to set StrGroupable	 * 	 * @param groupable the Groupable to set	 */	public void setStrGroupable(String groupable)	{		strGroupable = groupable;	}	/**	 * ref to SetGroupable	 * 	 * @param groupable the Groupable to set	 */	public void setGroupable(boolean groupable)	{		strGroupable = (groupable) ? ViewDefinitionConstants.VAL_BOOL_YES : ViewDefinitionConstants.VAL_BOOL_NO;	}	/**	 * ref to getstrGroupRelativePosition	 * 	 * @return the mGroupRelativePosition	 */	public String getStrGroupRelativePosition()	{		return strGroupRelativePosition;	}	/**	 * ref to SetstrGroupRelativePosition	 * 	 * @param groupRelativePosition the mGroupRelativePosition to set	 */	public void setStrGroupRelativePosition(String groupRelativePosition)	{		strGroupRelativePosition = groupRelativePosition;	}	/**	 * ref to MandatoryInGroup	 * 	 * @return the MandatoryInGroup	 */	public boolean isMandatoryInGroup()	{		return ViewDefinitionConstants.VAL_BOOL_YES.equals(getStrMandatoryInGroup());	}	/**	 * ref to SetstrMandatoryInGroup	 * 	 * @param mandatoryInGroup the MandatoryInGroup to set	 */	public void setMandatoryInGroup(boolean mandatoryInGroup)	{		strMandatoryInGroup = (mandatoryInGroup) ? ViewDefinitionConstants.VAL_BOOL_YES				: ViewDefinitionConstants.VAL_BOOL_NO;	}	/**	 * ref to getstrMandatoryInGroup	 * 	 * @return the MandatoryInGroup	 */	public String getStrMandatoryInGroup()	{		return strMandatoryInGroup;	}	/**	 * ref to SetstrMandatoryInGroup	 * 	 * @param mandatoryInGroup the MandatoryInGroup to set	 */	public void setStrMandatoryInGroup(String mandatoryInGroup)	{		strMandatoryInGroup = mandatoryInGroup;	}	/**	 * 	 * ref to groped	 * 	 * @return the Grouped	 */	public boolean isGrouped()	{		return ViewDefinitionConstants.VAL_BOOL_YES.equals(getStrGrouped());	}	/**	 * refto SetStrGrouped	 * 	 * @param grouped the Grouped to set	 */	public void setGrouped(boolean grouped)	{		strGrouped = (grouped) ? ViewDefinitionConstants.VAL_BOOL_YES : ViewDefinitionConstants.VAL_BOOL_NO;	}	/**	 * ref to getStrGrouped	 * 	 * @return the Grouped	 */	public String getStrGrouped()	{		return strGrouped;	}	/**	 * ref to SetStrGrouped	 * 	 * @param grouped the Grouped to set	 */	public void setStrGrouped(String grouped)	{		strGrouped = grouped;	}	/**	 * ref to get groupPosition	 * 	 * @return the mGroupPosition	 */	public int getGroupPosition()	{		return groupPosition;	}	/**	 * ref to setgroupPosition	 * 	 * @param groupPosition the mGroupPosition to set	 */	public void setGroupPosition(int groupPos)	{		groupPosition = groupPos;	}	/**	 * ref to mDrilldownRequired	 * 	 * @return the mDrilldownRequired	 */	public boolean isDrilldownRequired()	{		return ViewDefinitionConstants.VAL_BOOL_YES.equals(getStrDrilldownRequired());	}	/**	 * ref to SetstrDrilldownRequired	 * 	 * @param drilldownRequired the mDrilldownRequired to set	 */	public void setDrilldownRequired(boolean drilldownRequired)	{		strDrilldownRequired = (drilldownRequired) ? ViewDefinitionConstants.VAL_BOOL_YES				: ViewDefinitionConstants.VAL_BOOL_NO;	}	/**	 * ref to getstrDrilldownRequired	 * 	 * @return the mDrilldownRequired	 */	public String getStrDrilldownRequired()	{		return strDrilldownRequired;	}	/**	 * ref to SetstrDrilldownRequired	 * 	 * @param drilldownRequired the mDrilldownRequired to set	 */	public void setStrDrilldownRequired(String drilldownRequired)	{		strDrilldownRequired = drilldownRequired;	}	/**	 * ref to getlinkedSourceAmt	 * 	 * @return linkedSourceAmt	 */	public String getLinkedSourceAmt()	{		return linkedSourceAmt;	}	/**	 * ref to setlinkedSourceCcy	 * 	 * @param linkedSourceAmt	 */	public void setLinkedSourceAmt(String linkedSourceAmt)	{		this.linkedSourceAmt = linkedSourceAmt;	}	/**	 * ref to get linkedSourceCcy	 * 	 * @return linkedSourceCcy	 */	public String getLinkedSourceCcy()	{		return linkedSourceCcy;	}	/**	 * ref to Set linkedSourceCcy	 * 	 * @param linkedSourceCcy	 */	public void setLinkedSourceCcy(String linkedSourceCcy)	{		this.linkedSourceCcy = linkedSourceCcy;	}	/**	 * ref to getstrDisabled	 * 	 * @return strDisabled	 */	public String getStrDisabled()	{		return strDisabled;	}	/**	 * ref to SetstrDisabled	 * 	 * @param strDisabled	 */	public void setStrDisabled(String strDisabled)	{		this.strDisabled = strDisabled;	}	/**	 * ref to GetlookupFilterExtParams;	 * 	 * @return lookupFilterExtParams; }	 */	public String getLookupFilterExtParams()	{		return lookupFilterExtParams;	}	/**	 * ref to SetlookupFilterExtParams	 * 	 * @param lookupFilterExtParams	 */	public void setLookupFilterExtParams(String lookupFilterExtParams)	{		this.lookupFilterExtParams = lookupFilterExtParams;	}	/**	 * ref to parentColumnId	 * 	 * @return parentColumnId	 */	public String getParentColumnId()	{		return parentColumnId;	}	/**	 * Used to set the parent column id	 * 	 * @param parentColumnId	 */	public void setParentColumnId(String parentColumnId)	{		this.parentColumnId = parentColumnId;	}	/**	 * ref to summaryType	 * 	 * @return the summaryType	 */	public String getSummaryType()	{		return summaryType;	}	/**	 * ref to summaryType	 * 	 * @param summaryType the summaryType to set	 */	public void setSummaryType(String summaryType)	{		this.summaryType = summaryType;	}	/**	 * ref to getcustomTooltext	 * 	 * @return customTooltext	 */	public String getCustomTooltext()	{		return customTooltext;	}	/**	 * ref to setcustomTooltext	 * 	 * @param customTooltext	 */	public void setCustomTooltext(String customTooltext)	{		this.customTooltext = customTooltext;	}	/**	 * ref to Get linkedDataSeries	 * 	 * @return linkedDataSeries	 */	public String getLinkedDataSeries()	{		return linkedDataSeries;	}	/**	 * ref to SetlinkedDataSeries	 * 	 * @param linkedDataSeries	 */	public void setLinkedDataSeries(String linkedDataSeries)	{		this.linkedDataSeries = linkedDataSeries;	}	/**	 * ref to getchannelId	 * 	 * @return the channelId	 */	public String getChannelId()	{		return channelId;	}	/**	 * ref to SetchannelId	 * 	 * @param channelId the channelId to set	 */	public void setChannelId(String channelId)	{		this.channelId = channelId;	}	/**	 * ref to getpriority	 * 	 * @return the priority	 */	public String getPriority()	{		return priority;	}	/**	 * ref to priority	 * 	 * @param primary the primary to set	 */	public void setPriority(String priority)	{		this.priority = priority;	}	/**	 * ref to GettemplateConfig	 * 	 * @return	 */	public String getTemplateConfig()	{		return templateConfig;	}	/**	 * ref to Set templateConfig	 * 	 * @param templateConfig	 */	public void setTemplateConfig(String templateConfig)	{		this.templateConfig = templateConfig;	}	/**	 * ref to getTemplateId	 * 	 * @return TemplateId	 */	public String getTemplateId()	{		return templateId;	}	/**	 * ref to setTemplateId	 * 	 * @param templateId	 */	public void setTemplateId(String templateId)	{		this.templateId = templateId;	}	/**	 * ref to getColumnWidth	 * 	 * @return columnWidth	 */	public String getColumnWidth()	{		return columnWidth;	}	/**	 * ref to setColumnWidth	 * 	 * @param columnWidth	 */	public void setColumnWidth(String columnWidth)	{		this.columnWidth = columnWidth;	}	/**	 * ref to str to sb	 * 	 * @return sb The String representation of this Column	 */	public String toString()	{		return new StringBuffer("ViewId : ").append(viewId).append(", ColumnId : ").append(columnId)				.append(", ColumnDisplayNameKey : ").append(columnDisplayNameKey).append(", SortOrder : ")				.append(sortOrder).append(", DataType : ").append(dataType).append(", PositionFixed : ")				.append(positionFixed).append(", Mandatory : ").append(mandatory).append(", Visible : ")				.append(visible).append(", SortPosition : ").append(sortPosition).append(", Position : ")				.append(position).append(", SortRequired : ").append(sortRequired).append(", FilterRequired : ")				.append(filterRequired).append(", ListFilters : ").append(listFilters).append(", Sortable : ")				.append(sortable).append(", Hidden : ").append(hidden).append(", Search Indicator :")				.append(strSearchAllowed).append(", Search Order :").append(searchOrder).append(", Search Data Type :")				.append(searchDataType).append(", Code Value View Id :").append(codeValViewId)				.append(", Code value code column :").append(codeValCodeCol).append(", Code Value Display Column :")				.append(codeValDisplayCol).append(", XSeriesIndicator :").append(xSeriesInd)				.append(", YSeries Indicator :").append(ySeriesInd).append(", Data Series Indicator: ")				.append(dataSeriedInd).append("Handler ID: ").append(filterHandlerId).append(", Is Disabled: ")				.append(strDisabled).append(",ParentColumnId :").append(parentColumnId).append(",LinkedDataSeries :")				.append(linkedDataSeries).append(",CustomTooltext :").append(customTooltext).append(",ChannelId :")				.append(channelId).append(", primary:").append(priority).append(", templateId:").append(templateId)				.append(", templateConfig :").append(templateConfig).append(", columnWidth :").append(columnWidth)				.toString();	}	/**	 * If visibility is true => system should respect the position value else ignore	 */	private String viewId = null;	private String columnId = null;	private String channelId = null;	private String columnDisplayNameKey = null;	private int position = ViewDefinitionConstants.NO_POSITION;	private boolean positionFixed = false;	private boolean mandatory = false;	private boolean visible = false;	private boolean sortRequired = false;// If sortOrder is not null, sortRequired is true	private int sortPosition = ViewDefinitionConstants.MAX_VALUE;	private String sortOrder = null;	private String dataType = null;	private boolean filterRequired = false;// If listFilters is not null, filterRequired is true	private ArrayList listFilters = null;// It is the list of ColumnFilters applicable to this column.	private String strPositionFixed = ViewDefinitionConstants.VAL_BOOL_NO;// String representation of positionFixed	private String strCurrencyAppend = null;	// indicator. Used by sql-map.	private String strMandatory = ViewDefinitionConstants.VAL_BOOL_NO;// String representation of mandatory indicator.	// Used by sql-map.	private String strVisible = ViewDefinitionConstants.VAL_BOOL_NO;// String representation of visible indicator. Used	// by sql-map.	private String strSortPosition = null;// String representation of sortPosition. Used by sql-map.	private String strPosition = null;// String representation of position. Used by sql-map.	private boolean hidden = false;	private String strHidden = ViewDefinitionConstants.VAL_BOOL_NO;// String representation of hidden indicator. Used																	// by sql-map.	private boolean sortable = false;	private String strSortable = ViewDefinitionConstants.VAL_BOOL_NO;// String representation of sortable indicator.																		// Used by sql-map.	// Flag which indicates whether this column can be grouped	private String strGroupable = ViewDefinitionConstants.VAL_BOOL_NO;	// If this column is grouped, is there any rule to its relative position	private String strGroupRelativePosition;	// Flat which indicates whether this column is mandatory in a group.	private String strMandatoryInGroup;	// Flag which indicates whether this column has been included in the group	private String strGrouped = ViewDefinitionConstants.VAL_BOOL_NO;	private int groupPosition = ViewDefinitionConstants.NO_POSITION;	private String strDrilldownRequired = ViewDefinitionConstants.VAL_BOOL_NO;// Flag which indicates whether																				// drill down is required	private String strSearchAllowed = null;	private int searchOrder = ViewDefinitionConstants.NO_POSITION;	private String searchDataType = null;	private String codeValViewId = null;	private String codeValCodeCol = null;	private String codeValDisplayCol = null;	private String xSeriesInd = null;	private String ySeriesInd = null;	private String dataSeriedInd = null;	// JS function registered under iportal.globalhandlers with a unique Handler ID	private String filterHandlerId = null;	// This value will be used for initializing the filter and will take priority over dataType	private String filterDataType = null;	// Code for Enabling Filter Depending on DB Flag value	private String filterEnableInd = null;	/**	 * This value will be used for initializing the Amount column and currency column	 */	private String linkedSourceAmt = null;	private String linkedSourceCcy = null;	private String lookupFilterExtParams = null;	private String parentColumnId = null;	private String summaryType = null;	/**	 * The values will be used to say whether the column has to be disabled or not. Currently its only available for	 * checkbox column.	 */	private String strDisabled = ViewDefinitionConstants.VAL_BOOL_NO;	private String linkedDataSeries = null;	private String priority;	private String customTooltext = null;	private String templateId = null;	private String templateConfig = null;	private String columnWidth = null;	// Nithish changes	private String PRIMARY_IND = null;	private String SECONDARY_1 = null;	private String SECONDARY_2 = null;}